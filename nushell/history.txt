ls
ls | where type=dir
ls | where type dir
ls | where type
l
ls -lah
la
ls -l
ls -a
ls -a | where type == dir
find
find .
find . -type d
find -h
z `.Documents OneDrive (1)/`
cd projects/
ls
ls -a
find --regex "*.json"
ls */** 
ls */** | find --regex "*.json"
ls *.json
ls **/*.json
open  work/test/asd/1/two.json
open  work/test/asd/1/two.json | get location
open  work/test/asd/1/two.json | get location.state
cd
ls
date now | format date '%Y-%m'
date now | format date '%Y-%m' | into glob 
let current_month = (date now | format date '%Y-%m')
let glob_pattern = ($"*($current_month)*" | into glob)<\n>
ls $glob_pattern<\n>
ls | length
ls
[one two three] | to yaml
cd projects/
ls
cd work/
ls
cd pegasus/extractions/
ls
ls **/*.json
ls
cd data/
ls
ls **/*.json
ls **/*.json | get name
open sophos/1/peg.json | to yaml 
open sophos/1/peg.json | to csv
open sophos/1/peg.json | to md 
open sophos/1/peg.json | describe
2 > 1
cd 
cd .config/nu
cd .config/nushell/
ls
v
nvim
ls
open config.nu
open config.nu | describe
vi config.nu
ls
nvim env.nu
ls
cat history.txt
ls config.nu
ls config.nu | get type
ls | where type == file
awk
env
which python
which python | describe
which python | get path | describe
which python | get path 
which python | get path | first
which python | get path | first | describe
0.5kB
0.5kB | describe
let compare_closure = {|a| $a > 5 }
echo $compare_closure
let original_list = [ 40 -4 0 8 12 16 -16 ]
echo $original_list
$original_list
ls
z .config/
cd .config/
ls
cd nushell/
ls
cd ..
l
ls
ls -
ls -a
ls | where type == file
ls -a | where type == file
open .zshrc
open .zshrc | describe
nvim .zshrc
l
ls
ls | get type
ls | get name
ls | where type == file 
docker container ls
docker container ls | from ssv
docker container ls | detect columns 
doc stop redis-commander
docker container stop redis-commander
docker container ls | detect columns 
docker container ls | detect columns  | wc
docker container ls | detect columns  | wc -l
docker container ls | wc -l
docker container ls 
brew install zoxide
z projects/work/pegasus/pegasus/
z
zoxide
zoxide w pe pe
zoxidei
zoxide -h
zoxide query
cd .config/nushell/
ls
vi config.nu
nvim config.nu
cd .config/nushell/
ls
ls -D 
ls
open job.yaml
open job.yaml | get metadata.annotations
open job.yaml | get spec.template
open job.yaml | get spec.template.spec.containers
open job.yaml | get spec.template.spec.containers | column 
open job.yaml | get spec.template.spec.containers | columns 
nvim config.nu
nu
ls
date
date now 
date to-table 
date to-table $(date now)
date now | date to-table 
date now | date to-table  | get hour * 3
date now | date to-table  | get hour | * 4
date now | date to-table  | get hour | math product 4
date now | date to-table  | get hour | math product
date now | date to-table  | get hour 
ls 
vi .config/nushell/config.nu
fish
brew install fish
fish
z config
zoxide .config/nushell/
cd .config/nushell/
ls
vi config.nu
_zoxide
__zoxide_z
z projects/
zoxide projects/
z projects/
z -h
zoxide `.Documents OneDrive (1)/`
cmatriz
l
ls --du 
cd projects/work/pegasus/
ls --du
ls --all
l
l | get type == file
l | where type -- file
l | where type == file
cd projects/work/pegasus/
ls
kubectl -n sec-securityproject-production get po
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-69975fb895-dbmxb -f
nu
fish
z /Users/colombos/projects/work/secproj/securityproject
cd projects/casshome/ansibles/collections
ls
open requirements.yml
open requirements.yml | get collecrtions
open requirements.yml | get collections
open requirements.yml | get collections[0]
open requirements.yml | get collections
nu
describe 
ls
ls --all
nu
ls
kub
kubectl-ctx 
kubectl -n minicon get po
kubectl -n sec-securityproject-production get po
kubectl-ctx 
kubectl -n sec-securityproject-production get po
kubectl -n sec-securityproject-production get po | generate 
kubectl -n sec-securityproject-production get po | columns 
kubectl -n sec-securityproject-production get po | detect columns 
k
ls
ansi 
docker-index 
doco
z pr /Users/colombos/projects/
cd pr ca ans
ls 
rm sanitaria-*
ls
lf
ld
cd projects/work/pegasus/
ld
lf
if
kubectl -n sec-securityproject-production get po
k -n sec-se
ku
kubectl -n sec-securityproject-production logs api-sec-securityproject-production-5d79c7dd59-9stf8 -f
cd projects/work/pegasus/
ls
lf
ls | where type == file 
which http
http clopin.k8s.elmec.ad/api/v1/customers
http
http get clopin.k8s.elmec.ad/api/v1/customers
https
which https
which http
ls /opt/homebrew/bin 
ls /opt/homebrew/bin | where name =~ http
httpie
ls
http
which http
which https
http get clopin.k8s.elmec.ad/api/v1/customers
http get https://clopin.k8s.elmec.ad/api/v1/customers
http get https://clopin.k8s.elmec.ad/api/v1/customers/
https get https://clopin.k8s.elmec.ad/api/v1/customers/
cd
echo ciao
echo ciao | pbcopy
echo (ciao)
echo $(ls)
let asd = asd
let asd=asd
let asd="asd"
let asd "asd"
let asd asd
let asd = 'ads'
asd
$asd
echo $asd
brew install starship
cd .config/nushell/
nvim config.nu
nvim 
v
reload config
cd .config/nushell/
ls
ls | get name
v config.nu
ls
cd projects/work/pegasus/pegasus/
ls
cd src/pegasus/
z
z add .
cd
zi
zoxide 
ls
brew remove zoxide
asdf plugin add zoxide 
cd
asdf plugin add zoxide asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git
asdf plugin add zoxide https://github.com/nyrst/asdf-zoxide.git
asdf install zoxide latest<\n>
z /Users/colombos/projects/work/secproj/securityproject
z
zi
z
l
z /Users/colombos/projects/work/pegasus/pegasus
ls
la
l
l | get zize
l | get size
l | sort-by size
brew install carapace<\n>
mkdir ~/.cache/carapace
l
ls
l
carapace _carapace nushell | save --force ~/.cache/carapace/init.nu
l
l | where type == dir
ld
L
l
L
lf
doc ls
docker container port 
kubectl -n sec-securityproject-production get po
kub
kubectl -n sec-securityproject-production get po
doc ls
docker container  stop redis-commander traho-mysql 
lf
zi
l
ls **/*.yaml
ls **/*.yaml | open
open devutils/configs/alessi01.yaml
open devutils/configs/alessi01.yaml | get identities
ls **/*.yaml | open
ls **/*.yaml 
cat devutils/configs/alessi01.yaml 
cat devutils/configs/alessi01.yaml  | from yaml 
cat devutils/configs/alessi01.yaml  | from yaml  | to json 
l
nu
l
ls
ls -lah
ls --all
ls --all | sort-by size
rm id-front.jpg
z w pr pe 
zi
l
du --all
du --all | sort-by size | get name
du --all 
du --all | sort-by phisical | get name
du --all | sort-by physical | get name
du --all | sort-by physical | get path
chsh
ls | where name =~ shell
v shells
sudo nvim shells
chsh
l
zi
l
cd nushell/
l
v config.nu
l
zw pe pe
z w pe pe
l
ls **/*.yaml 
open devutils/configs/alessi01.yaml 
open devutils/configs/alessi01.yaml | first 2
open devutils/configs/alessi01.yaml | flatten
open devutils/configs/alessi01.yaml | flatten | flatten
open devutils/configs/alessi01.yaml | flatten 
open devutils/configs/alessi01.yaml 
open devutils/configs/alessi01.yaml  | get identities.sophos
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
cat devutils/configs/alessi01.yaml  
cat devutils/configs/alessi01.yaml | from yaml 
cat devutils/configs/alessi01.yaml | from yaml | to json 
cat devutils/configs/alessi01.yaml | from yaml | to json | from json | to csv 
cat devutils/configs/alessi01.yaml | from yaml | to json 
cat devutils/configs/alessi01.yaml | from yaml | to csv 
http get https://clopin.k8s.elmec.ad/api/v1/customers/
https get https://clopin.k8s.elmec.ad/api/v1/customers/
z w pe pe
z conf nu
o
p
l
keybindings  list
schema 
schema --help
l
z con 
v .zshrc
l
ccp
z conf oh
l
echo $path
$env.path
env
env | where name == path
$env.path
$env.path | grep go
$env.path | grep wuby
$env.path | grep ruby
$EDITOR
$env.EDITOR
$env.XDG_CONFIG_HOME
20 / 4
math sqrt 16
math sqrt(16)
usage 
math sqrt --h
math sqrt --help
math sqrt 16
math sqrt [16]
math sqrt --help 
16 | math sqrt 
[1,2,3,4] | math sum 
kk
j9s
kk
k9s
kk
k9s
nu
l
ls
l
nap list
nap list | fzf 
nap list | fzf | xargs nap
napc
napx
l
z w pe pe 
ls **/*.yaml 
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
z w pe pe 
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
cat devutils/configs/alessi01.yaml | from yaml 
z w pe pe 
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
z w pe pe 
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
z w pe pe 
open devutils/configs/alessi01.yaml  | get identities.sophos.stats
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
o
open devutils/configs/alessi01.yaml 
zx
z w pe pe 
open devutils/configs/alessi01.yaml 
z w pe pe 
open devutils/configs/alessi01.yaml 
true
false
khj
cat isug
l
zw proce
z w proce
ssh cortici-dmilog03.dmi.elmec.ad
ssh sicad-dmilog07.dmi.elmec.ad 
l
napc
v
napc
napp
napp | ccp
v
napp | ccp
v
napp
napc
napc | ccp
ssh enoplastic-dmilog01.dmi.elmec.ad 
ssh sicad-dmilog05.dmi.elmec.ad 
ssh sicad-dmilog07.dmi.elmec.ad 
ls
z plot
ls
z /Users/colombos/projects/work/scripts/plot/drop-rate
ls
source venv/bin/activate
ls
rm -rf venv/
p -m venv venv
which pip
pip install virtualenv
virtualenv venv
source venv/bin/activate.nu
ls
overlay use ./venv/bin/activate.nu
ls
which python
ls
which pip
pip install matplotlib
ls
l
z w 
z /Users/colombos/projects/work/secproj/securityproject
ls
l
pip remove virtualenv
pip uninstall virtualenv
l
cd projects/work/
l
rm clopin-1.3.13
cd test/
ls
mkdir phenix
cd phenix/
touch intro.md
z w 
gcl git@git.elmec.com:security/anacleto/anacletocode.git
cd anacletocode/
v
z w
v intro.md
mv intro.md intro.yaml
v intro.yaml
mv intro.yaml phenix-models.yaml
cp phenix-models.yaml phenix-models.txt
ls
l
rm phenix-models.txt
cd //
cd
z wo te phe
l
z ..
l
rm configure-fssh.sh
cd asd/
ls
cd ..
rmr asd/
l
screencapture 
screencapture go/
screencapture asd.asd
screencapture asd.asd
ls
open asd.asd
xdg-open asd.asd
open asd.asd
ssh mannesmann-dmilog01.dmi.elmec.ad 
ssh alessi-dmilog01.dmi.elmec.ad 
ssh carboter-dmilog02.dmi.elmec.ad 
ssh balconi-dmilog02.dmi.elmec.ad 
ssh elmec-dmilog-cust-master.dmi.elmec.ad 
ssh ircaspa-dmi05.dmi.elmec.ad 
v
napc | ccp
napc | pbcopy
nap
napp
napp | ccp
v
napp | ccp
ssh ircaspa-dmilog04.dmi.elmec.ad 
ssh rpe-dmilog02.dmi.elmec.ad
nap
ls
z plot
ls
l
z /Users/colombos/projects/work/scripts/plot/drop-rate
ls
rm -rf venv
pip install virtualenv
virtualenv venv
overlay use ./venv/bin/activate.nu
pip install matplotlib
python traffic-on-span.json 
p traffic-on-span.py
ssh enoplastic-dmilog01.dmi.elmec.ad 
ssh cesarin-dmilog01.dmi.elmec.ad
ssh cesarin-dmilog01.dmi.elmec.ad -L 8007:172.25.6.51:443
curl 172.25.6.51
curl 172.25.6.51:443
l
z w
cd test/
ls
cd phenix/
ls
view span 
v phenix-models.yaml
ssh rchitalia-dmilog02.dmi.elmec.ad 
ssh rchitalia-dmilog04.dmi.elmec.ad 
ssh enoplastic-dmilog01.dmi.elmec.ad 
ssh abkgroup-dmi02.dmi.elmec.ad 
ssh abkgroup-dmilog02.dmi.elmec.ad 
l
l | where name == .config
l --du  | where name == .config
cd .config/
l --du  
l --du   | sort-by size
l --du   | sort-by size --reverse 
l --du   | sort-by size --reverse | head 
pip remove virtualenv
pip uninstall virtualenv
pip install pipenv
ls
z
l
v
ls
rm -rf venv/
ls
pipenv --version
pipenv install
deactivate
pipenv install
pipenv shell
pipenv instll matplotlib
pipenv install matplotlib
deactivate
ls
l
open Pipfile
asdf local python 3.12
asdf list python
asdf local python 3.12.3
ls
l
open Pipfile.lock
open Pipfile.lock | from json 
open Pipfile.lock | from json  | get default
open Pipfile.lock | from json  | get default.matplotlib
l
lf
ld
lf
python --version
pipenv --python 3.9.6 install -r core_requirements.txt core_venv
asdf list python
pipenv --python 3.9.6 install -r core_requirements.txt core_venv
cat  /Users/colombos/projects/work/clopin/clopin/.tool-versions
pipenv --python 3.9 install -r core_requirements.txt core_venv
which pip
pip install pipenv
pipenv --python 3.9 install -r core_requirements.txt core_venv
ls
view core_requirements.txt
l
lf
rm Pipfile Pipfile.lock
pipenv --python 3.9 install 
pipenv install django django-jsoneditor django-filter django-rest-framework
pipenv install libsecurity @ git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
pipenv install libsecurity@git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
pipenv install mysql-server-has-gone-away mysql-client
pipenv install git+ssh://git@git.elmec.com/security/libsecurity.git
pipenv install git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
pipenv shell
v core_requirements.txt
lf
ls
lf
cat .env 
l
cd venv/
ls
cd ..
tree devutils/
open devutils/
l
l | where type == dir
l | where type == d
l | where type == dir
l | where type == file
lf
which python
l
cd clopin/
l
p manage.py runserver
pipenv install corsheaders
pipenv shell
ls
rm Pipfile*
l
lf
pipenv install
l
cd clopin/
l
cd ..
lf
cd clopin/
l
mv ../core_requirements.txt .
l
pipenv install
pipenv shell
l
l
z /Users/colombos/projects/work/clopin/clopin/clopin
l
open core_requirements.txt
pipenv install -r core_requirements.txt
p manage.py runserver
pipenv install libsecurity@git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede<\n>
p manage.py runserver
cd ..
ls
ls devutils/
open devutils/core_envs.sh
l
ls devutils/
ls devutils/environment/
doc ls
doc ls | detect columns 
doc ls | detect columns | get ID
doc ls | detect columns | get ID | xargs doc rm
doc ls | detect columns | get ID | xargs docker container rm
doc ls | detect columns | get ID | xargs docker container stop
doc ls
doco -f devutils/environment/docker-compose.yaml up -d
doc ls | detect columns | get ID | each { |it| docker container stop $it}
doc ls
doco -f devutils/environment/docker-compose.yaml up -d
p manage.py runserver
z clopin
ls
p manage.py runserver
ls ../devutils/environment/envs.core.sh
cat ../devutils/environment/envs.core.sh
cat ../devutils/environment/envs.core.sh | ccp
v ../devutils/environment/envs.core.sh 
exit
pipenv shell
ls
rm Pipfile*
l
cd clopin/
ls
rm core_requirements.txt
pipenv install
ls
v core_requirements.txt
pipenv install -r ../devutils/core-requirements.macos
overlay use ./venv/bin/activate.nu
pipenv install -r ../devutils/core-requirements.macos
p manage.py runserver
pipenv install django django-jsoneditor django-filter django-rest-framework
pipenv install django 
exit
pipenv shell
rm
rm Pipfile*
pipenv install
pipenv install django
pipenv install django-jsoneditor
pipenv install django-rest-framework
p manage.py runserver
pipenv install libsecurity @ git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
pipenv install libsecurity@git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
deactivate
rm Pipfile*
z /Users/colombos/.config/nushell
ls
lstmeval 
pipenv shell
ls **/core_venv
ls **/core_venv | get name | each { |it| echo $it | pbcopy }
doc ls
docker container stop clopin-mariadb 
l
doco -f devutils/environment/docker-compose.yaml up -d
doco -f ../../devutils/docker-compose.yaml up -d
l
go
l
go run mai.go
l
go run main.go
go run main.go --config ../../devutils/carboter02.yaml
open ../../devutils/configs/alessi01.yaml | get identities.microsoft
ls ../../devutils/configs/alessi01.yaml 
ls ../../devutils/configs/alessi01.yaml  | get name
ls ../../devutils/configs/alessi01.yaml  | get name | ccp
ls ../../devutils/configs/alessi01.yaml  | get name | str
ls ../../devutils/configs/alessi01.yaml  | get name | ccp
go run main.go --config ../../devutils/configs/alessi01.yaml  
source ../../devutils/configs/alessi01.nu
go run main.go --config ../../devutils/configs/alessi01.yaml  
ssh gros-dmilog01.dmi.elmec.ad 
k
l
ssh gammarec-dmilog02.dmi.elmec.ad
ssh gammamec-dmilog02
ssh gammamec-dmilog02.dmi.elmec.ad
ssh carboter-dmilog02.dmi.elmec.ad 
ssh elmecspa-dmilog05.dmi.elmec.ad 
ssh elmec-dmilog05.dmi.elmec.ad 
ssh gammamec-dmilog02.dmi.elmec.ad
❯ 〉ssh elmec-dmilog04.dmi.elmec.ad
❯ ssh elmec-dmilog04.dmi.elmec.ad
ssh elmec-dmilog04.dmi.elmec.ad
ssh elmec-dmilog04.dmi.elmec.ad
ssh elmec-dmilog04.dmi.elmec.ad 
ssh elmec-dmilog04.dmi.elmec.ad 
l
cd clopin/
l
pipenv install 
l
pipenv install -r ../devutils/core-requirements.macos
l
exit
pipenv shell
rm Pipfile*
pipenv install && pipenv shell
pipenv install django
pipenv install django-rest-framework
pipenv install django-jsoneditor
p manage.py runserver
pipenv install django-cors-headers
p manage.py runserver
pipenv install django-filters
pipenv install django-filter
p manage.py runserver
pipenv install drf_yasg
p manage.py runserver
pipenv install django-extensions
p manage.py runserver
pipenv install libsecurity@git+ssh://git@git.elmec.com/security/libsecurity.git@ab2ca9443e112b84a05c9ceb5470bf36455d8ede
pipenv install libsecurity@git+ssh://git@git.elmec.com/security/libsecurity.git
pipenv install git+ssh://git@git.elmec.com/security/libsecurity.git
pipenv install git@git.elmec.com/security/libsecurity.git
l
cd clopin/
l
pipenv install
p manage.py runserver
pipenv install mysql-server-has-gone-away mysql-client
pipenv install mysql-server-has-gone-away 
pipenv install mysqlclient
pipenv lock
p manage.py runserver
v Pipfile
p manage.py runserver
p manage.py makemigrations
ssh elmec-dmilog05.dmi.elmec.ad 
ssh carboter-dmilog02.dmi.elmec.ad 
z w oper
l
z /Users/colombos/projects/work/operator/dmilog-operator
l
v
ssh elmec-dmilog04.dmi.elmec.ad
ssh elmec-dmilog04.dmi.elmec.ad
v
v asd.xml
rm asd.xml
ssh elmec-dmilog04.dmi.elmec.ad
z w sk
ls
l
vi .build.envs.sh 
v .build.envs.sh
source .build.envs.sh
z w sk
v
napc | pbcopy
v
napp | ccp
k get po -A | grep skipper
kubectl get po -A | grep skipper
kx
kubectl get po -A | grep skipper
kubectl get ns | grep sk
kubectl get deployments -n sec-skipper-quality 
v
napp | ccp
ssh elmec-dmilog05.dmi.elmec.ad 
ssh elmec-dmilog05.dmi.elmec.ad 
p manage.py makemigrations
p manage.py migrate
doco -f ../../devutils/docker-compose.yaml up -d
docker-compose -f ../devutils/environment/docker-compose.yaml up -d
p manage.py migrate
kx
source ../devutils/environment/envs.core.nu
p manage.py migrate
p manage.py runserver
python  manage.py createsuperuser
ls
l
z w pr
z w
l
cd clopin
ls
cd clopin/
ls
cd node/
ls
l
z w cl
l
z ..
l
z /Users/colombos/projects/work/clopin/repos
l
z pra
l
open pra.csv
open pra.csv | get data
open pra.csv | get data | describe
l
open pra.csv
open pra.csv | where DATA == 28/05/2024
open pra.csv | where DATA == 28/05/2024 | get IDRS
kbx
kx
p manage.py runserver
p manage.py update_dependencies --customers
p manage.py sync_dependencies --customers
l
which python
which python | get path
which python | get path | ccp
which python | get path | str
which python | get path | into string
v
z w sk
src .build.envs.sh
source .build.envs.sh
z w 
l
cd gitops/
l
rmr fluentd/
git clone git@git.elmec.com:security/dmilog-ng/gitops/fluentd.git
cd fluentd/
l
napp | ccp
git fetch --all
gb -a
git checkout  ELMEC
l
v
cd ..
l
rmr fluentd/
gcl git@git.elmec.com:security/anacleto/anacletocode.git
rmr anacletocode/
git clone git@git.elmec.com:security/dmilog-ng/gitops/fluentd.git
l
cd fluentd/
l
git fetch --all
gco ELMEC
l
v
l
lzg
cd ..
l
rmr fluentd/
git clone git@git.elmec.com:security/dmilog-ng/gitops/fluentd.git
cd fluentd/
git fetch --all
gco ELMEC
napp | ccp
ssh elmec-dmilog05.dmi.elmec.ad 
v
l
cd clopin/
l
p manage.py runserver
doco -f ../../devutils/docker-compose.yaml up -d
docker-compose -f ../devutils/environment/docker-compose.yaml up -d
p manage.py runserver
source ../devutils/environment/envs.core.nu
p manage.py runserver
source ../devutils/environment/envs.core.nu
cd clopin/
ls
source ../devutils/environment/envs.core.nu
which python
cd /Users/colombos/.local/share/virtualenvs/clopin-y6xFRDsq/bin/python
cd /Users/colombos/.local/share/virtualenvs/clopin-y6xFRDsq/bin/
ls
cd ..
l
cd lib/
l
cd python3.9/
l
cd site-packages/
kl
l
L
ls **/*cert.pem
kubectl -n sec-clopin-production get po
kubectl -n sec-clopin-production exec cclopin-sec-clopin-production-69975fb895-dbmxb -it -- bash
kubectl -n sec-clopin-production get po
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-69975fb895-dbmxb -it -- bash
ls **/*cert.pem | get name
ls **/*cert.pem | first |  get name
kubectl -n sec-clopin-production get po
ls **/*cert.pem | first |  get name | ccp
kubectl cp sec-clopin-production/clopin-sec-clopin-production-69975fb895-dbmxb:/usr/lib/python3/dist-packages/certifi/cacert.pem cacert.pem
cat cacert.pem | ccp
v certifi/cacert.pem
pipenv shell
p manage.py sync_dependencies --customers
l
p manage.py sync_dependencies --customers
source ../devutils/environment/envs.core.nu
p manage.py sync_dependencies --customers
z w sk
l
b
z w
v -d clopin/clopin/deploy/production.yaml skipper/deploy/quality.yaml
v
p manage.py sync_dependencies --dmilogs
kubectl -n
kx
kubectl get ns | grep sk
kub
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po | detect columns 
kubectl -n sec-skipper-quality get po | detect columns | first | get name
kubectl -n sec-skipper-quality get po | detect columns | first | get name | xargs kubectl -n sec-skipper-quality delete po
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality describe po skipper-sec-skipper-quality-6589555675-v5b8z
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality get deployments
kubectl -n sec-skipper-quality get rs
kubectl -n sec-skipper-quality delete rs skipper-sec-skipper-quality-798c9b9b4f
ls
kubectl -n sec-skipper-quality get rm
kubectl -n sec-skipper-quality get rs
kubectl -n sec-skipper-quality get rs | detect columns | first | get name | xargs kubectl -n sec-skipper-quality delete rs
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality delete po skipper-sec-skipper-quality-6c9fbdd9c9-zr46f 
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality describe po skipper-sec-skipper-quality-6c9fbdd9c9-k77bz 
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-6c9fbdd9c9-k77bz 
v -d clopin/clopin/deploy/production.yaml skipper/deploy/quality.yaml
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get deployments
kubectl -n sec-skipper-quality get rs
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get rs
kubectl -n sec-skipper-quality get rs | detect columns | where age == 20m
kubectl -n sec-skipper-quality get rs | detect columns | where age == '20m'
kubectl -n sec-skipper-quality get rs | detect columns 
kubectl -n sec-skipper-quality get rs | detect columns | first | get name | xargs kubectl -n sec-skipper-quality delete rs
kubectl -n sec-skipper-quality 
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po | detect columns | first | get name | xargs kubectl -n sec-skipper-quality logs
v -d projects/work/clopin/clopin/deploy/production.yaml projects/work/skipper/deploy/quality.yaml
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality describe deployments skipper-sec-skipper-quality 
kubectl -n sec-skipper-quality describe deployments skipper-sec-skipper-quality | less
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality get po | detect columns | first | get name | xargs kubectl -n sec-skipper-quality logs
docker pull docker.elmec.com/security/skipper@sha256:96dad2bf4c1db8f2376e35abe78e4ed29687ef086508ac61a6e260c0f9c6d2e9
docker login doker.elmec.com
docker login docker.elmec.com
docker pull docker.elmec.com/security/skipper@sha256:96dad2bf4c1db8f2376e35abe78e4ed29687ef086508ac61a6e260c0f9c6d2e9
docker image ls
docker image ls | grep sk
doc ls
docker exec d3ad150f1ddc -it bash
z w pe pe
l
docker exec -it d3ad150f1ddc bash
v
doc ls
docker run  b2e2e81bda57
doc ls | detect columns | get ID | each { |it| docker container stop $it}
doco -f ../../devutils/docker-compose.yaml up -d
doc ls
dc
dc --help
dd
dcc
v
z c nu
l
z
z conf nu
l
doc ls
doc ls | dtc
doc ls | dtc | get ID
doc ls | dtc | get ID | each {|it| docker container stop $it}
nu
doc ls
doco -f ../../devutils/docker-compose.yaml up -d
z w sk
v
z w zsk
z w sk 
l
src .build.envs.sh
source .build.envs.sh
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po | dtc
kubectl -n sec-skipper-quality get po | dtc | get NAME | each {|it| kubectl describe po $it}
kubectl -n sec-skipper-quality get po
brew list | grep docker
brew list | grep do
brew list
brew list | grep -i doc
docker
which docker
which docker | get path | each {|it| rm $it}
brew install --cask docket
l
brew install --cask docker
1.4Kb + 3Mb
brew remove docker
/Applications/Docker.app/Contents/MacOS/uninstall
rm -rf ~/Library/Group\ Containers/group.com.docker<\n>rm -rf ~/Library/Containers/com.docker.docker<\n>rm -rf ~/.docker
brew install --cask docker
sudo rm /Applications/Docker.app
sudo rm -rf /Applications/Docker.app
brew install --cask docker
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po -w
4Tb * 16 
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality describe po skipper-sec-skipper-quality-7d8fc6776c-xkltv
v
lzg
git config pull.rebase true
lzg
l
doc ls
docker container stop elated_cannon 
kubectl -n sec-skipper-quality get po -w
kubectl -n sec-skipper-quality 
ssh besteuro-dmilog01.dmi.elmec.ad 
kubectl -n sec-skipper-quality  get po -w
kubectl -n sec-skipper-quality describe po skipper-sec-skipper-quality-664b5f54cf-wdt2x 
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-775cfb8f87-ldwml
napp
mysql -u skipper -h 172.16.4.202 -p
cd .local/share/
ls
cd db_ui/
l
v connections.json
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-775cfb8f87-ldwml
napp | ccp
cal
z /Users/colombos/projects/work/test
mkdir extraction
cd extraction/
touch asd.json
v
l
napp | ccp
v asd.json
mkdir 01
mkdir 02
mkdir 03
l
v asd.json
l
mkdir 0
mkdir 04
mkdir 05
mkdir 06
rmr 0
l
rmr asd.json
ssh sorin-dmilog01.dmi.elmec.ad 
ssh sorin-dmilog02.dmi.elmec.ad 
ssh sorin-dmilog01.dmi.elmec.ad 
ssh sorin-dmilog03.dmi.elmec.ad 
ssh sorin-dmilog04.dmi.elmec.ad 
ssh sorin-dmilog05.dmi.elmec.ad 
ssh sorin-dmilog06.dmi.elmec.ad 
ssh sorincrm-dmilog05.dmi.elmec.ad 
ssh sorincrm-dmilog02.dmi.elmec.ad 
cd .local/share
ls
cd db_ui/
l
ls clopin/
ls mongo-beauty01/
v
l
open connections.json
open connections.json | get url
open connections.json | sort-by name
ssh sorincrm-dmilog03.dmi.elmec.ad 
v
c
v
napp | ccp
napc
napc | ccp
napc | pbcopy
napp | ccp
v
zip -r .
z ..
l
zip -h
l
ls
128B + 3Gb
zip
ssh orr-dmilog02.dmi.elmec.ad 
open ~/.ssh/known_hosts
open ~/.ssh/known_hosts | dtc
open ~/.ssh/known_hosts 
open ~/.ssh/known_hosts  | head
open ~/.ssh/known_hosts |<\n>    lines
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column "," "host,sha" 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " "host,sha" 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column  "host,sha" 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " "host,sha" 
split column --help
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column "\s*" 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column --regex "\s*" 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column --regex '\s*'
open ~/.ssh/known_hosts |<\n>    lines |<\n>
open ~/.ssh/known_hosts |<\n>    split column --regex '\s*'
open ~/.ssh/known_hosts |<\n>    split column " "
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " "
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    fzf
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | fzf
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | input list 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | describe
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str kebab-case 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str collect "\n"
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str-collect "\n"
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n"
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n" | fzf
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n" | fzf | each {|it| ssh $it}
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n" | fzf 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n" | fzf | str trim 
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | str join "\n" | fzf | str trim | xargs ssh
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    get host | sort-by host --reverse  | str join "\n" | fzf | str trim | xargs ssh
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host --reverse  | get host |  str join "\n" | fzf | str trim | xargs ssh
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | xargs ssh
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | xargs ssh &&
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | xargs ssh and
open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | each {|it| ssh $it}
ssh |<\n>    open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | each {|it| ssh $it}
ssh |<\n>    open ~/.ssh/known_hosts |<\n>    lines |<\n>    split column " " host algo sha |<\n>    sort-by host | get host |  str join "\n" | fzf | str trim | each {|it| ssh "$it"}
open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host | <\n>get host |<\n>str join "\n" | <\n>fzf | <\n>str trim | <\n>if $it != "" { ssh -t $it }
open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host | <\n>get host |<\n>str join "\n" | <\n>fzf | <\n>str trim <\n>
ssh besteuro-dmilog01.dmi.elmec.ad
open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host | <\n>get host |<\n>str join "\n" | <\n>fzf | <\n>str trim | ssh<\n>
open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host |<\n>get host |<\n>str join "\n" |<\n>fzf |<\n>str trim |<\n>each { |host| ssh $host }
asd = open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host |<\n>get host |<\n>str join "\n" |<\n>fzf |<\n>str trim<\n>
asd = (open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host |<\n>get host |<\n>str join "\n" |<\n>fzf |<\n>str trim)
let asd = (open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host |<\n>get host |<\n>str join "\n" |<\n>fzf |<\n>str trim)
$asd
ssh $asd
p manage.py runserver
ssh (open ~/.ssh/known_hosts |<\n>lines |<\n>split column " " host algo sha |<\n>sort-by host |<\n>get host |<\n>str join "\n" |<\n>fzf |<\n>str trim)
kubectl --namespace sec-securityproject-quality get po static-sec-securityproject-quality-cc48fd8fb-mzx96 
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-59d6565648-xh6vb 
kubectl -n sec-skipper-quality describe skipper-sec-skipper-quality-59d6565648-xh6vb 
kubectl -n sec-skipper-quality describe po skipper-sec-skipper-quality-59d6565648-xh6vb 
zeh
2to3-3.9 
fssh
help fssh
fssh
help fssh
fssh
v
ssh brivaplast-dmilog01.dmi.elmec.ad
ssh brivaplast-dmilog01
ssh brivaplast-dmilog01.dmi.elmec.ad
while true dossh brivaplast-dmilog01.dmi.elmec.ad
while true (<\n>ssh brivaplast-dmilog01.dmi.elmec.ad<\n>sleep 10<\n>)
sleep --h
sleep --help
while true (<\n>ssh brivaplast-dmilog01.dmi.elmec.ad<\n>sleep 10sec<\n>)
while true {<\n>ssh brivaplast-dmilog01.dmi.elmec.ad<\n>sleep 10sec<\n>}
while true {<\n>ssh cofimco-dmilog01.dmi.elmec.ad<\n>sleep 2sec<\n>)
fssh
z htt
l
z /Users/colombos/http/work
mkdir skipper
l
z /Users/colombos/projects/work/skipper
z
z htt w sk
zi
l
cd skipper/
l
touch asd.sh
mv asd.sh asd.nu
ping https://skipper.k8s.elmec.ad/mole_notify
ping skipper.k8s.elmec.ad
ping skipper-quality.k8s.elmec.ad
ping skipper-uality.k8s.elmec.ad
ping skipper-kjdhuality.k8s.elmec.ad
ping idhjed-kjdhuality.k8s.elmec.ad
nslookup https://skipper.k8s.elmec.ad/mole_notify
nslookup skipper.k8s.elmec.ad
nslookup aksdjh
nslookup xasdkir.k8s.elmec.ad
while true {<\n>ssh besteuro-dmilog01.dmi.elmec.ad<\n>sleep 2sec<\n>)
while true {<\n>ssh cofimco-dmilog01.dmi.elmec.ad<\n>sleep 2sec<\n>}
ssh fontanapi-dmilog01.dmi.elmec.ad 
5kib * 3
(5Gib - 332Kib) * 4
scp besteuro-dmilog01.dmi.elmec.ad:/var/lib/rancher/k3s/server/db/snapshots/manual_backup-besteuro-dmilog01.dmi.elmec.ad-1730904362  snapshot
z /Users/colombos/http
l
z /Users/colombos/projects/worko
z ht w
l
z 
z ht w
l
z /Users/colombos/http/work/pegasus
l
zi 
z /Users/colombos/http/work/pegasus/microsoft
l
v
l
z ..
l
z /Users/colombos/http/work/skipper
l
v .env.nu
source .env.nu
$env.SKIPPER_TOKEN
while true {<\n>ssh besteuro-dmilog01.dmi.elmec.ad<\n>sleep 2sec<\n>}
kubectl -n sec-skipper-quality get svc
kubectl -n sec-skipper-quality describe svc svc-skipper-quality-skipper-api 
k9s
source .env.nu
$env.SKIPPER_TOKEN
$env.SKIPPER_URI
open data.json | from yaml | to json
open body.yaml | from yaml | to json
open body.yaml 
open body.yaml | from yaml 
open body.yaml | to json 
v .
q
open body.yaml 
open body.yaml | to csv 
$env.SKIPPER_URI
https POST $SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $SKIPPER_TOKEN" \<\n>    Client:$client_name < (open data.json | to json)<\n>
https POST $env.SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $env.SKIPPER_TOKEN" \<\n>    Client:$client_name < (open data.json | to json)<\n>
https POST $env.SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $env.SKIPPER_TOKEN" \<\n><     (open data.json | to json)<\n>
https POST $SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $SKIPPER_TOKEN" < (open data.json | to json)<\n>
https POST $env.SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $env.SKIPPER_TOKEN" < (open data.json | to json)<\n>
https POST $env.SKIPPER_URI \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $env.SKIPPER_TOKEN" < (open data.json | to json) --offline<\n>
https POST "$env.SKIPPER_URI" \<\n>    Content-Type:application/json \<\n>    Authorization:"STATIC $env.SKIPPER_TOKEN" < (open data.json | to json) <\n>
open body.yaml | to json | save data.json
z ht w sk
l
open body.yaml | to json | save data.json
open data.json
v
kubectl -n sec-skipper-quality exec skipper-sec-skipper-quality-679b66c6b4-cp4xc  -it -- bash
kubectl -n sec-securityproject-quality exec api-sec-securityproject-quality-594d8f8456-mqh79 -it -- bash
kubectl -n sec-skipper-quality exec skipper-sec-skipper-quality-679b66c6b4-cp4xc  -it -- sh
open body.yaml
open body.yaml | to json 
v body.yaml
open body.yaml
open body.yaml | upsert ci_id=124
upsert --help
open body.yaml | upsert ci_id 124
open body.yaml | upsert ci_id 124 | save body.yaml
open body.yaml | upsert ci_id 124 | save --force  body.yaml
open body.yaml
napp | ccp
v
nap
napp | ccp
ssh mundys-dmilog01.dmi.elmec.ad 
z w ope
v
z /Users/colombos/projects/work/operator/dmilog-operator
l
open roles/dmilog/tasks/main.yml
ssh mundys-dmilog01.dmi.elmec.ad 
keybindings list 
keybindings list | where type == edits
keybindings list | get type | uniq 
keybindings list | where type == modes
keybindings list | where type == edits
keybindings list | where type == edits and name ~= iads
keybindings list | where type == edits and name ~= "asd"
keybindings list | where type == edits && name ~= "asd"
keybindings list | where type == "edits" && name =~ "asd"
keybindings list | where type == "edits" and name =~ "asd"
keybindings list | where type == "edits" and name =~ "acc"
keybindings list | where type == "edits" and name =~ "sugg"
keybindings list | where type == "edits" and name =~ "compl"
keybindings list | get type | uniq 
keybindings list | where type == "events" and name =~ "compl"
keybindings list | where type == "events" | get name
length 
keybindings list | where type == "events" | get name
keybindings list | get type | uniq 
keybindings list | where type == "keycodes" | get name
keybindings list | get type | uniq 
zip
which zip
gstat
gstat .
which nu
gstat . --help
cargo
cargo install nu_plugin_gstat
gstat
which gstat
gstat .
plugin list 
cargo uninstall nu_plugin_gstat
plugin add gstat
plugin add --help
[nu_plugin_gstat] | each { cargo install $in } | ignore
plugin add /Users/colombos/.asdf/installs/rust/1.82.0/bin/nu_plugin_gstat
gstat .
plugin list 
gstat .
gstat --help
plugin rm /Users/colombos/.asdf/installs/rust/1.82.0/bin/nu_plugin_gstat
cargo uninstall nu_plugin_gstat
cargo install nu-plugin-bexpand<\n>
cargo uninstall nu-plugin-bexpand<\n>
napp | ccp
v
cargo install nu_plugin_mongo
plugin list
cargo install nu_plugin_net
which cargo
which cargo | get path
ls (which cargo | get path)
ls which cargo | get path | describe
which cargo | get path | describe
ls (which cargo | get path | first)
which cargo | get path 
ls  /Users/colombos/.asdf/shims/cargo
cd  /Users/colombos/.asdf/shims/cargo
cd  /Users/colombos/.asdf/shims/
ls
cd ..
ls
cd installs/
l
cd rust/
l
cd 1.82.0/
l
cd downloads/
l
cd ..
ls **/nu_plugin*
ls **/nu_plugin* | first | get name
plugin add (ls **/nu_plugin* | first | get name)
plugin add installs/rust/1.82.0/bin/nu_plugin_net
cargo uninstall nu_plugin_net
z h
l
z ht
l | get name | {$it}
l | get name | {$in}
l | get name | {echo $in}
l | get name 
l | get name | first
l | first
l | first 
l | first | get name
open(l | first | get name)
open $(l | first | get name)
open (l | first | get name)
lasd
ls (which cargo | get path | first)
ls (which cargo | first | get path)
which cargo | each {$in}
which cargo | each {open $in}
which cargo | each {cat $in}
which cargo 
which cargo | first | get path
which cargo | first 
l
lf
L
napp | ccp
v
napp | ccp
ssh kairos-dmilog01.dmi.elmec.ad 
l
pwd
pwd | str reverse 
pwd | split row '/'
pwd | split row '/' | each {$in}
pwd | split row '/' | each {$in | str upcase }
pwd | split row '/' | str upcase
l
ip a
ip
ifconfig 
heif-convert 
napp | ccp
keybindings default 
ssh sorin-dmilog01.dmi.elmec.ad 
z w 
l
z /Users/colombos/projects/work/gitops
l
gcl git@git.elmec.com:cybergon/gitops/custom-ttl.git
l
z custom_ttl
l
z custom_ttl
cd custom-ttl/
l
napp | ccp
nap
napp | ccp
l
z ..
l
rmr custom-ttl/
gcl git@git.elmec.com:cybergon/gitops/custom-ttl.git --bare
l
z custom-tt
cd custom-ttl.git/
l
napp | ccp
for remote in (git branch -r | where $it !~ '/HEAD') {<\n>    git checkout --track $remote<\n>}
git branch -r
napp | ccp
git fetch --all
for remote in (git branch -r | where $it !~ '/HEAD') {<\n>    git checkout --track $remote<\n>}
git branch -r
gco MUNDYS
l
for remote in (git branch -r | where $it !~ '/HEAD') {<\n>    git worktree add $remote<\n>}
napp
ssh sorin-dmilog01.dmi.elmec.ad 
git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }
z w gitops ttl
git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }
for ref in (git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch) {}
for ref in (git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch) {<\n>  $in<\n>}
for ref in (git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch) {<\n>  $ref<\n>}
for ref in (git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch) {<\n>echo $ref<\n>}
for ref in (git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch) {<\n>  echo ciao<\n>}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch<\n>
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject $in == main<\n>
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject {|$ref| ref=="main" || ref=="quality" }
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject {|$ref| ref=="main" or ref=="quality" }
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject {|$ref| ref "main" }
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject {|$ref| ref ==  "main" }
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject {|$ref| ref == main }
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject { |branch| $branch == "main" }
git for-each-ref --format='%(refname)' | lines 
git for-each-ref --format='%(refname)' | lines | split column '/' ref head branch | get branch
reject --help
skip --help
drop --help
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter $in != "main"
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter $in 
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter "main"
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in == main}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}
$refs
for r in $refs {<\n>$r<\n>}
for r in $refs {<\n>echo $r}
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject { |branch| $branch == "main" || $branch == "quality" }
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject { |branch| $branch == "main" or $branch == "quality" }
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject { $in == "main" or $in == "quality" }
$refs
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | reject { |branch| $branch == "main" or $branch == "quality" }
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}
$refs
for b in $refs {echo $b}
for b in $refs {echo ciao}
for b in $refs {print ciao}
for b in $refs {<\n>if (try { cd $b } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>print "done with $b"<\n>cd ..<\n>}<\n>}
for b in $refs {<\n>    print "done with $b"<\n>    cd ..<\n>}
z w gitops ttl
l
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}
$refs
du
glob asd[1-3]
;
l
glob *txt
tree .
glob *sample
glob *.sample
glob --depth 3 *.sample
glob --depth 9 *.sample
port
url build-query 
url build-query  --help
$refs
$refs | url build-query 
l
l | flatten
l | expand 
uname
sys temp
sys disks
sys host
l | explore
l | table
l | grid
cd
l | explore
cal
banner
inc
pwd
ast
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | ast
ast --help
ast 'git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}' 
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | inspect
z w gitops ttl
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | inspect
l
let refs = git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality}
$refs
$refs | each {git worktree add $in}
l
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | each {git worktree add $in}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | each {git worktree remove $in}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | each {git worktree add $in}
git for-each-ref --format='%(refname)' refs/heads | lines | split column '/' ref head branch | get branch | filter {$in != main and $in != quality} | each {git worktree remove $in}
let exclude = ["quality", "main", "master"]<\n>
$exclude
git for-each-ref --format='%(refname)' refs/heads |<\n> lines |<\n> split column '/' ref head branch |<\n> get branch |<\n> filter { |in| $exclude | each { |ex| $in != $ex } } |<\n> each {git worktree add $in}<\n>
git for-each-ref --format='%(refname)' refs/heads |<\n> lines |<\n> split column '/' ref head branch |<\n> get branch |<\n> filter { |in| $exclude | each { |ex| $in != $ex } }<\n>
git for-each-ref --format='%(refname)' refs/heads |<\n> lines |<\n> split column '/' ref head branch |<\n> get branch |<\n> filter { |$in| $exclude | each { |$ex| $in != $ex } }<\n>
fssh
git for-each-ref --format='%(refname:short)' refs/heads
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree rm $branch }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree remove $branch }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
l
git worktree list
git worktree add TESI
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>   git worktree add $branch<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) }<\n>#   each {<\n>#   |branch|<\n>#   git worktree add $branch<\n>#}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) }<\n>   each {<\n>   |branch|<\n>   git worktree add $branch<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>   git worktree add $branch<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each { |branch|git worktree add $branch}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each { |branch|git worktree remove $branch}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each { |branch| git worktree remove $branch }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       cd $branch<\n>pwd<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       git worktree add $branch<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       cd $branch<\n>       pwd<\n>}<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       cd $branch<\n>       git pull<\n>}<\n>
git branch
cd DEACAP/
git pull
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       git worktree remove $branch<\n>}<\n>
ls
cd
z w gitops ttl
l
nap
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
k
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree remove $branch }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree remove $branch | default ok }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch; ok }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch; $"ok" }<\n>
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree remove $branch; $"ok" }<\n>
ssh cesarin-dmilog01.dmi.elmec.ad 
ssh genfit-dmilog01.dmi.elmec.ad
ssh cesarin-dmilog01.dmi.elmec.ad 
l
rm -rf venv
pipenv install
l
v
ssh carboter-dmilog02.dmi.elmec.ad 
l
z w cl repo
l
mv pra/ findings
l
z findings
l
cd ~/Downloads/
l
cd output/
l
cd .. 
cp -r output/ ~/projects/work/clopin/repos/findings
cd ~/projects/work/clopin/repos/findings
l
rm findings.csv
mv output/* .
rm output/
l
l | get name | sort
l | get name | sort | filter {$in != git}
l | get name | sort | filter {$in != .git}
l | get name | filter {$in != .git} | sort | first
let exclude = (l | get name | filter {$in != .git} | sort | first)
$exclude
let exclude = (l | get name | filter {$in != .git and $in != $exclude} | sort )
let exclude = (l | get name | filter {$in != .git } | sort )
$exclude
let exclude = (l | get name | filter {$in != .git } | sort | first)
$exclude
l | get name | filter {$in != .git and $in != $exclude } | sort 
l | get name | filter {$in != .git and $in != $exclude } | sort | each {}
l
mkdir next
l | get name | filter {$in != .git and $in != $exclude } | sort | each {mv $in next}
l | get name | filter {$in != .git and $in != $exclude and $in != next } | sort | each {mv $in next}
l
rm .git
rm -rf .git
v
l
git init
l
touch domain_findings.csv
open 2024-03-07_Domain_Findings.csv | save domain_findings.csv
open 2024-03-07_Domain_Findings.csv | save -f domain_findings.csv
open domain_findings.csv
$"" | save -f domain_findings.csv
open domain_findings.csv
git add domain_findings.csv 
git commit -m "first commit"
open 2024-03-07_Domain_Findings.csv | save -f domain_findings.csv
l
open domain_findings.csv
mkdir done
mv 2024-03-07_Domain_Findings.csv done
l
z w cl node
l
rm -f __pycache__/
rm -r __pycache__/
l
open .gitlab-ci.yml
open .gitlab-ci.yml | get build:docker
open .gitlab-ci.yml | get build:docker.script
l
mv core_requirements.txt clopin/
l
ls */.gitlab-ci.yml
ls */.gitlab-ci.yml | get name
ls */.gitlab-ci.yml | get name | first
ls */.gitlab-ci.yml | get name | first | ccp
rm node/.gitlab-ci.yml
l
open .env
lzg
mv .env ..
lzg
mv ../.env .
l
mv node_requirements.txt .gitignore
lzg
mv node_requirements.txt node/
lzg
l
pipenv install
pipenv install -r node_requirements.txt
l
v
v
l
pipenv shell
deactivate
v
pipenv shell
pipenv shell
pipenv -h
v
pipenv shell
pipenv shell
pipenv --venv
pipenv graph
l
z w cl repo
zi
zi .
l
z /Users/colombos/projects/work/clopin/repos/findingsl
l
cd findings/
l
z w cl core
z w cl cl
l
z /Users/colombos/projects/work/clopin/clopin/clopin
l
z w cl cl
l
z /Users/colombos/projects/work/clopin/clopin/clopin
l
source ../devutils/environment/envs.core.nu
z w cl no
l
p manage.py runserver
doc ls
l
docker-compose -f devutils/docker-compose.yaml up -d
p manage.py runserver
doc ls
docker container logs clopin-mariadb 
p manage.py runserver
docker-compose -f devutils/docker-compose.yaml down -v
docker-compose -f devutils/docker-compose.yaml up -d --force-recreate
p manage.py makemigrations
p manage.py migrate
p manage.py runserver
p manage.py createsuperuser
open domain_findings.csv
open domain_findings.csv | length 
open domain_findings.csv | get URL | uniq | length 
open domain_findings.csv | get ' URL' | uniq | length 
open domain_findings.csv 
open domain_findings.csv | uniq-by " URL" " Domain" " Username" " Password" " AV"
open domain_findings.csv | uniq-by " URL" " Domain" " Username" " Password" " AV" | length 
open domain_findings.csv | length 
let u = open domain_findings.csv | uniq-by "URL" "Domain" "Username" "Password" "AV"<\n>
let u = (open domain_findings.csv | uniq-by "URL" "Domain" "Username" "Password" "AV")<\n>
let u = (open domain_findings.csv | uniq-by " URL" " Domain" " Username" " Password" " AV")<\n>
u
$u
$u | length 
let o = open domain_findings.csv
$o
$o | length 
$o | where not $u 
$o | where not ($u | contains $in)
open domain_findings.csv
$o
$u
$o
$u
for ui in $u {<\n>print $ui<\n>}
$u | sort-by  " Username"
$u | sort-by  " Username" | save uuu.csv
$o | sort-by " Username" | save ooo.csv
ssh cesarin-dmilog01.dmi.elmec.ad 
kub
kubectl get ns
kx
kubectl get ns
kubectl -n sec-trahoproject-production get po 
kubectl -n sec-trahoproject-production get po | detect columns 
kubectl -n sec-trahoproject-production get po | detect columns | get name
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter {|in| $n ~= pull}
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" }
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg BESTEURO }
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | grep BESTEURO }
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg BOTTVER }
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg BOTTVER | ignore  }
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg BESTEURO | ignore}
rg -E --help
ssh cesarin-dmilog01.dmi.elmec.ad 
rg -h\
rg -h
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg -e "BESTEURO|BOTTVER" | ignore}
ssh cesarin-dmilog01.dmi.elmec.ad 
v -d uuu.csv ooo.csv
l
rm ooo.csv uuu.csv
mkdir analisys
cp domain_findings.csv analisys/
cd analisys/
open domain_findings.csv
open domain_findings.csv | rename url domain username pwd av
open domain_findings.csv | rename url domain username pwd av | save -f domain_findings.csv
open domain_findings.csv | rename url domain username pwd av | collecto | save -f domain_findings.csv
open domain_findings.csv | rename url domain username pwd av | collect | save -f domain_findings.csv
open domain_findings.csv
sshssh cesarin-dmilog01.dmi.elmec.ad -L 8007:172.25.6.50:443
ssh cesarin-dmilog01.dmi.elmec.ad -L 8007:172.25.6.50:443
ssh    ColomboS@elmecdmi.local@cesarin-dmi01.dmi.elmec.ad -L 8007:172.25.6.50:443
l
open domain_findings.csv
open data.csv | group-by "url" "domain" "username" "pwd" "av" | each { |it| $it | where count > 1 } | flatten
group-by --help
open data.csv | group-by 
open domain_findings.csv | group-by 
groups --help
group-by --help
open data.csv | group-by { |it| $it.url } | each { |it| $it | where count > 1 } | flatten
open domain_findings.csv | group-by { |it| $it.url } | each { |it| $it | where count > 1 } | flatten
open domain_findings.csv | group-by { |it| $it.url } 
open domain_findings.csv | group-by { |it| $"($it.url)-($it.domain)-($it.username)" }
open domain_findings.csv | group-by { |it| $"($it.url)-($it.domain)-($it.username)" } | to yaml 
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |it| $it | where count > 1 }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |it| $it | where $it | length > 1 }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |it| $it | where $it | length  }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |in| $in }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |in| print $in }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |in| print $in.0 }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |in| print $in | length }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | each { |in| $in | length }
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } 
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)" } | to yaml | save asd.yaml
l
v 1.yaml
v 2.yaml
v asd.yaml
l
v -d 1.yaml 2.yaml
l
rm 1.yaml 2.yaml
open asd.yaml
open domain_findings.csv
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" } 
open domain_findings.csv | group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" } | to yaml  | save -f asd.yaml
z w cl re
l
z /Users/colombos/projects/work/clopin/repos/findings
l
z /Users/colombos/projects/work/clopin/repos/findings/analisys
l
v 1.yaml
v 2.yaml
v
p manage.py runserver
p manage.py makemigrations
p manage.pyrun
p manage.py runserver
p manage.py migrate
doco -f ../../devutils/docker-compose.yaml down -v
l
z core
l
z ..
l
doco -f devutils/docker-compose.yaml down -v
doco -f devutils/docker-compose.yaml up -d --force-recreat
doco -f devutils/docker-compose.yaml up -d --force-recreate
p manage.py migrate
v asd.yaml
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>| where { |group| group.value | length > 1 }
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>| where value | length > 1
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>| each { |row| row | update count { get value | length } }<\n>| where count > 1
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>| each { |row| $row | update count { get value | length } }<\n>| where count > 1
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>
l
L
lf
open domain_findings.csv<\n>| group-by { |in| $"($in.url)-($in.domain)-($in.username)-($in.pwd)-($in.av)" }<\n>
p manage.py runserver
p manage.py createsuperuser
open domain_findings.csv
z ..
open domain_findings.csv
open domain_findings.csv | tail
v -d 1.yaml 2.yaml
l
v
l
z /Users/colombos/projects/work/clopin/repos/findings/analisys
l
z ..
l
z next
l
ls
ls | get name | each {open $in | columns }
ls | get name | each {open $in | columns } | to json 
open 2024-03-14_Domain_Findings.csv --raw 
open 2024-03-14_Domain_Findings.csv --raw  | head
k
l
z ..
l
gs
git status
gstat
z w cl repo
l
z /Users/colombos/projects/work/clopin/repos/findings
l
z w cl node
l
ls devutils/
source devutils/envs.node.nu
pwd
pwd | ccp
$env.TARGET_BRANCH
$env.TARGET_FILE
$env.TARGET_REPO
git --git-dir=$env.TARGET_REPO/.git --work-tree=$env.TARGET_REPO add $env.TARGET_FILE
git --git-dir = "$env.TARGET_REPO/.git" --work-tree = "$env.TARGET_REPO" add $env.TARGET_FILE
git --git-dir = "$env.TARGET_REPO/.git" 
git --git-dir="$env.TARGET_REPO/.git" 
git --git-dir="$env.TARGET_REPO/.git" --work-tree="$env.TARGET_REPO" add $env.TARGET_FILE
"$env.TARGET_REPO"
$"$env.TARGET_REPO"
$"($env.TARGET_REPO)"
git --git-dir="($env.TARGET_REPO)/.git" --work-tree="($env.TARGET_REPO)" add "($env.TARGET_FILE)"
git --git-dir="($env.TARGET_REPO)/.git" 
--git-dir="($env.TARGET_REPO)/.git" 
git --git-dir="($env.TARGET_REPO)/.git" 
git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) add ($env.TARGET_FILE)
source devutils/envs.node.nu
p run.py --target-project $env.TARGET_PROJECT --target-repo $env.TARGET_REPO --target-branch $env.TARGET_BRANCH --target-file $env.TARGET_FILE --taget-commit $env.TARGET_COMMIT
p run.py --target-project $env.TARGET_PROJECT --target-repo $env.TARGET_REPO --target-branch $env.TARGET_BRANCH --target-file $env.TARGET_FILE --target-commit $env.TARGET_COMMIT
source devutils/envs.node.nu
p run.py --target-project $env.TARGET_PROJECT --target-repo $env.TARGET_REPO --target-branch $env.TARGET_BRANCH --target-file $env.TARGET_FILE --target-commit $env.TARGET_COMMIT
p manage.py runserver
v
zw cl cl 
z w cl cl
l
z cl
l
v
cd ../node/
v
echo "p run.py --target-project $env.TARGET_PROJECT --target-repo $env.TARGET_REPO --target-branch $env.TARGET_BRANCH --target-file $env.TARGET_FILE --target-commit $env.TARGET_COMMIT"
echo "p run.py --target-project ($env.TARGET_PROJECT) --target-repo ($env.TARGET_REPO) --target-branch ($env.TARGET_BRANCH) --target-file ($env.TARGET_FILE) --target-commit ($env.TARGET_COMMIT)"
echo p run.py --target-project $env.TARGET_PROJECT --target-repo $env.TARGET_REPO --target-branch $env.TARGET_BRANCH --target-file $env.TARGET_FILE --target-commit $env.TARGET_COMMIT
echo p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT
echo p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT | str join 
echo p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT | str join  | ccp
echo p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT | str join  " "
echo p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT | str join  " " | ccp
v
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
k
l
p manage.py shell
p manage.py core_requirements.txt
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
p manage.py runserver
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
let current = 1
ls next/
ls next | get name.$current
ls next | get name.1
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
open domain_findings.csv
open domain_findings.csv | columns 
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
open domain_findings.csv 
open domain_findings.csv | where URL = 
open domain_findings.csv | where URL = "https://www.deagostini.com/gr/myarea/p/activate"
open domain_findings.csv | where URL == "https://www.deagostini.com/gr/myarea/p/activate"
open domain_findings.csv | where ' URL' == "https://www.deagostini.com/gr/myarea/p/activate"
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.2) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.3) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
realpath projects/work/clopin/repos/findings | ccp
l
p manage.py shell
p manage.py runserver
def asd [] {<\n>    let repo_path = /Users/colombos/projects/work/clopin/repos/findings<\n>    let names =  ls $repo_path/next | get name<\n>    $names<\n>}
asd
asd()
$repo_path
let repo_path = /Users/colombos/projects/work/clopin/repos/findings
let repo_path = "/Users/colombos/projects/work/clopin/repos/findings"
l
l done/
mv done/2024-03-07_Domain_Findings.csv next/
l
let files = ls ($repo_path)/next
ls ($repo_path)/next
ls $repo_path/next
ls $repo_path
[ $repo_path, "asd" ]  | path join 
pipenv shell
z w cl node
l
k
l
realpath projects/work/clopin/repos/findings | ccp
realpath ../repos/findings | ccp
realpath ../../repos/findings | ccp
let target_path = "/Users/colombos/projects/work/clopin/repos/findings"<\n>
$target_path
ls $target_path
ls $target_path/next
ls $target_path"/next"
ls "$target_path/next"
ls "($target_path)/next"
ls $target_path)/next"
ls $target_path)/next
ls "${target_path}/next"
ls $"$target_path/next"
ls $"($target_path)/next"
each --help
each  --help
l
realpath projects/work/clopin/repos/findings | ccp
z
realpath projects/work/clopin/repos/findings | ccp
z w cl node
source test.nu
z w cl cl cl
v
napp | ccp
z w 
z /Users/colombos/projects/work/gitops
l
rmr custom-ttl.git/
gcl git@git.elmec.com:cybergon/gitops/custom-ttl.git
cd custom-ttl/
l
gco -b DATAMARS
l
mkdir datamars-dmilog01.dmi.elmec.ad 
cd datamars-dmilog01.dmi.elmec.ad/
touch custom_ttl.lst
v custom_ttl.lst
l
z ..
;
l
lzg
ssh datamars-dmilog01.dmi.elmec.ad
ssh iai-dmilog01.dmi.elmec.ad
while true {<\n>ssh iai-dmilog01.dmi.elmec.ad<\n>sleep 2sec<\n>}
while true {<\n>ssh iai-dmilog01.dmi.elmec.ad | ignore<\n>sleep 2sec<\n>}
ssh root@172.16.69.42 
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg -e "BESTEURO|BOTTVER" | ignore}
v
napp | ccp
kubectl -n sec-trahoproject-production get po | detect columns | get name | filter { $in | str starts-with "pull" } | each {kubectl -n sec-trahoproject-production logs $in | rg -e "ATOS" | ignore}
brew install openvpn
openvpn
brew remove openvpn
brew install --cask openvpn-connect
ssh root@172.16.69.42 
ssh iai-dmi01.dmi.elmec.ad -J 172.16.10.182
ssh iai-dmi01.dmi.elmec.ad 
ssh iai-dmilog01.dmi.elmec.ad 
ssh  ColomboS@elmecdmi.local@iai-dmilog01.dmi.elmec.ad  -J root@iai-dmilog01.dmi.elmec.ad
ssh  ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad  -J root@iai-dmilog01.dmi.elmec.ad
ssh  root@iai-dmilog01.dmi.elmec.ad -J ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad
ssh -J ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad -J root@172.16.10.182
ssh ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad -J root@172.16.10.182
ssh root@172.16.10.182 -J ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad
ssh root@172.16.10.182 -J ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad 
ssh ColomboS@elmecdmi.local@iai-dmi01.dmi.elmec.ad  -J root@172.16.10.182
ssh -o ForwardAgent=yes -J ColomboS@iai-dmi01.dmi.elmec.ad root@172.16.10.182
ssh -J ColomboS@iai-dmi01.dmi.elmec.ad root@172.16.10.182 -vvv
ssh iai-dmilog01.dmi.elmec.ad 
fssh
ssh brivaplast-dmilog01.dmi.elmec.ad 
ssh bottver-dmilog03.dmi.elmec.ad 
ssh carboter-dmilog02.dmi.elmec.ad 
ssh -J ColomboS@iai-dmi01.dmi.elmec.ad root@172.16.10.182 -i ~/.ssh/dmilog
ssh brivaplast-dmilog01.dmi.elmec.ad 
l
cd plot/
l
cd drop-rate/
l
pipenv shell
l
p drop_rate_by_hour.json
p drop_rate_by_hour.py
ssh elmec-dmilog05.dmi.elmec.ad 
ssh elmec-dmilog05.dmi.elmec.ad 
let threads = 12
let ring = 550000
ls
let ring = 550000
let threads = 12
$ring * $threads * 0.000002109
let ring = 6000000
let threads = 14
$ring * $threads * 0.000002109
let ring = 600000
$ring * $threads * 0.000002109
$ring
$threads
p manage.py runserver
doc ls
p manage.py shell
p manage.py makemigrations
p manage.py migrate
let repo = "/Users/colombos/projects/work/clopin/repos/findings"<\n>let files = ls $"($repo)/next" | get name<\n>$files | each {|file| cp $file $"($repo)/domain_findings.csv" |<\n>    $env.CLOPIN_ENVIRONMENT = "devel";<\n>    $env.DELIVERY_TOKEN = "ww5jmRj3jKRIqE1jtw0DnoIjevmojynA";<\n>    $env.CLOPIN_CORE_TOKEN = $env.DELIVERY_TOKEN;<\n>    $env.CLOPIN_CORE_URL = "http://127.0.0.1:8000";<\n>    $env.CLOPIN_TOKEN_TYPE = "STATIC";<\n>    $env.TARGET_PROJECT = "test";<\n>    $env.TARGET_REPO = "/Users/colombos/projects/work/clopin/repos/findings";<\n>    $env.TARGET_BRANCH = "master";<\n>    $env.TARGET_FILE = "domain_findings.csv";<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) add ($env.TARGET_FILE);<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) commit $env.TARGET_FILE -m "testing $env.TARGET_FILE";<\n>    $env.TARGET_COMMIT = (git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) rev-parse HEAD);<\n><\n>    p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT;<\n>}<\n>
p manage.py runserver
z w cl cl cl
p manage.py shell
source devutils/envs.core.nu
p manage.py shell
l
ls done/
ls next/
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.2) domain_findings.csv
<\n>source devutils/envs.node.nu; p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT
<\n>source devutils/envs.node.nu | ignore; p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT
<\n>p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT
doco -f devutils/docker-compose.yaml down -v
doco -f devutils/docker-compose.yaml up -d --force-recreate
p manage.py migrate
p manage.py sync_dependencies --customers --dmilogs
let repo = "/Users/colombos/projects/work/clopin/repos/findings"<\n>let files = ls $"($repo)/next" | get name<\n>$files | each {|file| cp $file $"($repo)/domain_findings.csv" |<\n>    $env.CLOPIN_ENVIRONMENT = "devel";<\n>    $env.DELIVERY_TOKEN = "ww5jmRj3jKRIqE1jtw0DnoIjevmojynA";<\n>    $env.CLOPIN_CORE_TOKEN = $env.DELIVERY_TOKEN;<\n>    $env.CLOPIN_CORE_URL = "http://127.0.0.1:8000";<\n>    $env.CLOPIN_TOKEN_TYPE = "STATIC";<\n>    $env.TARGET_PROJECT = "test";<\n>    $env.TARGET_REPO = "/Users/colombos/projects/work/clopin/repos/findings";<\n>    $env.TARGET_BRANCH = "master";<\n>    $env.TARGET_FILE = "domain_findings.csv";<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) add ($env.TARGET_FILE);<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) commit $env.TARGET_FILE -m "testing $env.TARGET_FILE";<\n>    $env.TARGET_COMMIT = (git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) rev-parse HEAD);<\n><\n>    p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT;<\n>}<\n>
p manage.py runserver
p manage.py core_requirements.txt
p manage.py createsuperuser
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.2) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.3) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.4) domain_findings.csv
source devutils/envs.node.nu
p 
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.4) domain_findings.csv
cp (ls next | get name.5) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.6) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
let repo = "/Users/colombos/projects/work/clopin/repos/findings"<\n>let files = ls $"($repo)/next" | get name<\n>$files | each {|file| cp $file $"($repo)/domain_findings.csv" |<\n>    $env.CLOPIN_ENVIRONMENT = "devel";<\n>    $env.DELIVERY_TOKEN = "ww5jmRj3jKRIqE1jtw0DnoIjevmojynA";<\n>    $env.CLOPIN_CORE_TOKEN = $env.DELIVERY_TOKEN;<\n>    $env.CLOPIN_CORE_URL = "http://127.0.0.1:8000";<\n>    $env.CLOPIN_TOKEN_TYPE = "STATIC";<\n>    $env.TARGET_PROJECT = "test";<\n>    $env.TARGET_REPO = "/Users/colombos/projects/work/clopin/repos/findings";<\n>    $env.TARGET_BRANCH = "master";<\n>    $env.TARGET_FILE = "domain_findings.csv";<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) add ($env.TARGET_FILE);<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) commit $env.TARGET_FILE -m "testing $env.TARGET_FILE";<\n>    $env.TARGET_COMMIT = (git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) rev-parse HEAD);<\n><\n>    p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT;<\n>}<\n>
p manage.py runserver
napp | ccp
z conf sql
l
v
let repo = "/Users/colombos/projects/work/clopin/repos/findings"<\n>let files = ls $"($repo)/next" | get name<\n>$files | each {|file| cp $file $"($repo)/domain_findings.csv" |<\n>    $env.CLOPIN_ENVIRONMENT = "devel";<\n>    $env.DELIVERY_TOKEN = "ww5jmRj3jKRIqE1jtw0DnoIjevmojynA";<\n>    $env.CLOPIN_CORE_TOKEN = $env.DELIVERY_TOKEN;<\n>    $env.CLOPIN_CORE_URL = "http://127.0.0.1:8000";<\n>    $env.CLOPIN_TOKEN_TYPE = "STATIC";<\n>    $env.TARGET_PROJECT = "test";<\n>    $env.TARGET_REPO = "/Users/colombos/projects/work/clopin/repos/findings";<\n>    $env.TARGET_BRANCH = "master";<\n>    $env.TARGET_FILE = "domain_findings.csv";<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) add ($env.TARGET_FILE);<\n>    git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) commit $env.TARGET_FILE -m "testing $env.TARGET_FILE";<\n>    $env.TARGET_COMMIT = (git --git-dir=($env.TARGET_REPO)/.git --work-tree=($env.TARGET_REPO) rev-parse HEAD);<\n><\n>    p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT;<\n>}
ls next/
ls next/ | each {open $in | get ' AV'}
ls next/ | each {open ($in | get name) | get ' AV'}
ls next/ | each {open ($in | get name) | get ' AV'} | flatten
ls next/ | each {open ($in | get name) | get ' AV'} | flatten | uniq
l
ls next/
ls done/
l
open domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
open domain_findings.csv | get ' AV' | uniq
open domain_findings.csv | length 
open domain_findings.csv
open domain_findings.csv | length 
open domain_findings.csv | uniq 
open domain_findings.csv | uniq  | length 
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
ssh quantasys-dmilog01.dmi.elmec.ad 
git status
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
open domain_findings.csv | length
ssh bottver-dmilog03.dmi.elmec.ad 
ssh cesarin-dmilog01.dmi.elmec.ad 
cp (ls next | get name.2) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
pipenv shell
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.3) domain_findings.csv
v test.nu
pipenv shell
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.4) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.5) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.6) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
cp (ls next | get name.1) domain_findings.csv
open domain_findings.csv | length
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
vi asd.jsonm
open domain_findings.csv
open domain_findings.csv | get ' AV' | uniq
open domain_findings.csv --raw | head
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
p manage.py shell
doco -f devutils/docker-compose.yaml down -v
doco -f devutils/docker-compose.yaml up -d --force-recreate
p manage.py runserver
p manage.py makemigrations
p manage.py migrate
p manage.py createsuperuser
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
v domain_findings.csv
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
ls next/*.csv
ls next | each {open $in}
ls next | each {open $in.name}
ls next | each {open $in.name | get ' AV'}
ls next | each {open $in.name | get ' AV'} | to yaml 
ls next | each {open $in.name | get ' AV'} | flatten 
ls next | each {open $in.name | get ' AV'} | flatten  | uniq 
l
cd ..
l
mkdir dwm
cd dwm
touch domains.csv
v domains.csv
source devutils/envs.node.nu
l
git init .
git add domains.csv 
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
p manage.py sync_dependencies --customers --dmilogs
p manage.py runserver
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-69975fb895-dbmxb -f
ssh cesarin-dmi01.dmi.elmec.ad 
l
ls
l
ls | where modified > 5 days ago
ls | where modified > 5 
ls | where modified > 2024-10-09
rm asd.json
rm id-back.jpg
rm job.yaml
rm snapshot
rm traffic-on-span.png
l
z conf
mkdir scripts
l
cd scripts/
l
cd fuzzy/
l
touch fk.nu
while true {<\n>ssh iai-dmilog01.dmi.elmec.ad | ignore<\n>sleep 2sec<\n>}
z conf scr
$env.HOME
mkdir .cache/fz
let actions = ["logs", "get", "exec", "edit"]<\n>
$actions
let actions = ["logs", "get", "exec", "edit"]<\n>
$actions
$actions | path join 
$actions | str join "\n"
$actions | str join "\n" |  fzf
z conf scr
l
z /Users/colombos/.config/scripts/fuzzy
l
source fk.nu
z /Users/colombos/.config/scripts/fuzzy
source fk.nu
z conf nu
l
source fk.nu
kubectl get ns | detect columns 
kubectl get ns | detect columns | get NAME
source fk.nu
ls ~/.cache/fz/
source fk.nu
$"$env.HOME/.cache/fk"
$"($env.HOME)/.cache/fk"
source fk.nu
ls /Users/colombos/.cache
rmr /Users/colombos/.cache/fz/
source fk.nu
ls /Users/colombos/.cache
rmr /Users/colombos/.cache/fk
source fk.nu
ls /Users/colombos/.cache
source fk.nu
logs
source fk.nu
nu greet.nu 
source greet.nu
rmr greet.nu
nu fk.nu 
nu test.nu 
let cache_dir = $"($env.HOME)/.cache/fk"<\n>
let actions = ["install", "logs", "get", "exec", "edit", "delete", "copy" ]<\n>
$actions
def nufzf [l] {<\n>   $l | str join "\n" | fzf<\n>}<\n>
let action = nufzf $actions<\n>
$action
nu fk.nu 
rmr /Users/colombos/.cache/fk
nu fk.nu 
z conf nu
z ../scripts/fuzzy
l
z conf sc fuz
nu fk.nu 
ls /Users/colombos/.cache
nu fk.nu 
ls /Users/colombos/.cache/fk
nu fk.nu 
ls /Users/colombos/.cache/
nu fk.nu 
ls /Users/colombos/.cache/fk/
nu fk.nu 
rmr /Users/colombos/.cache/fk/*
nu fk.nu 
ls /Users/colombos/.cache/fk/
nu fk.nu 
l
nu fk.nu 
join ["asd"] ["sssdd"]
join --hel
join --help
nu fk.nu 
kubectl -n sec-clopin-production get po
input listen 
nu test.nu 
nu fk.nu 
kubectl -n sec-clopin-production get po clopin-sec-clopin-production-69975fb895-dbmxb  -o yaml
nu fk.nu 
n
nu fk.nu 
ssh bottver-dmilog03.dmi.elmec.ad 
fssh
v
ls
ls **/*env*
ls **/*env*core*
ls **/*core*env*
l
source core/devutils/envs.build.nu
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t ${PRJ_NAME}-core-base:latest --build-arg SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}" .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t "($PRJ_NAME)-core-base:latest" --build-arg SSH_PRIVATE_KEY="($SSH_PRIVATE_KEY)" .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t "($env.PRJ_NAME)-core-base:latest" --build-arg "SSH_PRIVATE_KEY=($env.SSH_PRIVATE_KEY)" .
history
history | where command =~ "docker"
history | where command =~ "docker build"
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $env.PRJ_NAME-core-base:latest --build-arg SSH_PRIVATE_KEY=$env.SSH_PRIVATE_KEY .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t ($env.PRJ_NAME)-core-base:latest --build-arg SSH_PRIVATE_KEY=$(env.SSH_PRIVATE_KEY) .
docker build --pull --no-cache \<\n>  -f build/core/Dockerfile.core.baseimage \<\n>  -t $"($env.PRJ_NAME)-core-base:latest" \<\n>  --build-arg SSH_PRIVATE_KEY=$env.SSH_PRIVATE_KEY \<\n>  .
(docker build --pull --no-cache <\n>  -f build/core/Dockerfile.core.baseimage <\n>  -t $"($env.PRJ_NAME)-core-base:latest" <\n>  --build-arg SSH_PRIVATE_KEY=$env.SSH_PRIVATE_KEY <\n>  . )
(docker build --pull --no-cache <\n>  -f build/core/Dockerfile.core.baseimage <\n>  -t $"($env.PRJ_NAME)-core-base:latest" <\n>  --build-arg SSH_PRIVATE_KEY=($env.SSH_PRIVATE_KEY)<\n>  . )
z w ll ll
l
source core/devutils/envs.build.nu
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t ${PRJ_NAME}-core-base:latest --build-arg SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}" .
(docker build --pull --no-cache <\n>  -f build/core/Dockerfile.core.baseimage <\n>  -t $"($env.PRJ_NAME)-core-base:latest" <\n>  --build-arg SSH_PRIVATE_KEY=($env.SSH_PRIVATE_KEY)<\n>  . )
docker build --pull --no-cache -f build/node/Dockerfile.node.baseimage -t ${PRJ_NAME}-node-base:latest .
docker build --pull --no-cache -f build/node/Dockerfile.node.baseimage -t $"($env.PRJ_NAME)-node-base:latest" .
doc ls
source core/devutils/envs.dev.nu
p manage.py runserver
z core
p manage.py runserver
pipenv shell
p manage.py runserver
pipenv reinstall
pipenv --rm
pipenv install
l
z 
z cl repo find
l
v
v asd.json
v
z core
l
z code
z
z cl cl core
p manage.py shell
source core/devutils/envs.dev.nu
source /devutils/envs.dev.nu
source devutils/envs.dev.nu
cp (ls next | get name.1) domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
source devutils/envs.node.nu
$env.DELIVERY_TOKEN
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
$env.TARGET_BRANCH
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
l
cal
z pro
z w tes
l
z /Users/colombos/projects/work/test/phenix
l
v phenix-models.yaml
v asd.asd
kubectl get ns | grep clop | detect columns 
kubectl get ns | grep clop 
p manage.py runserver
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
which python
which python | first 
which python | first | get path
which python | first | get path | ccp
cd /Users/colombos/.local/share/virtualenvs/
l
cd node
cd node-3jBVzoLj/
l
ls **/*.pem
kubectl cp sec-clopin-production/clopin-sec-clopin-production-69975fb895-dbmxb:/usr/lib/python3/dist-packages/certifi/cacert.pem cacert.pem
cat cacert.pem | ccp
rmr cacert.pem
z w cl cl no
l
source devutils/envs.node.nu
$env.CLOPIN_CORE_TOKEN
$env.CLOPIN_TOKEN_TYPE
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
p manage.py shell
pipenv shell
exit
pipenv shell
pipenv --rm
pipenv install
source devutils/envs.dev.nu
l
source devutils/envs.dev.nu
z co
z w cl cl co
l
source devutils/envs.dev.nu
pipenv install
l
z core
l
cd /Users/colombos/.local/share/virtualenvs/
l
..
--
z w cl cl co
which python
python --version
which python
cd /Users/colombos/.local/share/virtualenvs/core-8kQi3kML/
l
ls **/*.pem
nvim (ls **/*.pem | first | get name)
kubectl cp sec-clopin-production/clopin-sec-clopin-production-69975fb895-dbmxb:/usr/lib/python3/dist-packages/certifi/cacert.pem cacert.pem
cat cacert.pem | ccp
rmr cacert.pem
nvim (ls **/*.pem | first | get name)
pipenv shell
p manage.py runserver
exit
pipenv shell
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
v 
l
z conf sc fuz
nu fk.nu 
z conf sc fuz
nu fk.nu 
z conf sc fuz
nu fk.nu 
kubectl get po -A
kubectl get po -A -o wide
nu fk.nu 
l
v .gitlab-ci.yml
v
nu fk.nu 
z w cl cl 
z conf sc fuz
nu fk.nu 
z w ll ll
cat .kube/
cat .kube/ | ccp
cat .kube/config  | ccp
kubectl -n sec-trahoproject-production get po
kubectl -n sec-trahoproject-production get jobs
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client | save --force job.yaml
kub
kubectl apply -f job.yaml 
kubectl -n sec-trahoproject-production get po
kubectl -n sec-trahoproject-production logs test-t65vr 
cp ~/.kube/config asdasd.yaml
l
rm job.yaml asdasd.yaml
v job.yaml
z w cl cl
l
source core/devutils/envs.build.nu
docker build --pull --no-cache -f build/node/Dockerfile.node.baseimage -t ${PRJ_NAME}-node-base:latest .
docker build --pull --no-cache -f build/node/Dockerfile.node.baseimage -t $"($env.PRJ_NAME)-node-base:latest" .
doi ls
docker images ls
docker image ls
docker pull docker.elmec.com/security/clopin-core-base@sha256:d51708bba3e43ee3ef35e02aead3d6aaad58988672ef6a90f6df2bef37f4c04e
docker image ls
docker run -it fd64458ccf1f bash
docker pull docker.elmec.com/security/clopin-core-base@sha256:4c9135b5f928a12c16ccb3d99f8656c0935aa69cb180f24129807ca3b451386b
docker image ls
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client 
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client | save --force job.yaml
v job.yaml
kubectl apply -f job.yaml 
kubectl -n sec-trahoproject-production get po
kubectl -n sec-trahoproject-production logs test-j95c9  -f
p manage.py runserver
docker run -it fd64458ccf1f bash
ls
source core/devutils/envs.build.nu
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t ${PRJ_NAME}-core-base:latest --build-arg SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY}" .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $"( $env.PRJ_NAME )-core-base:latest" $"--build-arg SSH_PRIVATE_KEY=( $env.SSH_PRIVATE_KEY )" .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $"($env.PRJ_NAME)-core-base:latest" $"--build-arg SSH_PRIVATE_KEY=($env.SSH_PRIVATE_KEY)" .
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $"($env.PRJ_NAME)-core-base:latest" --build-arg SSH_PRIVATE_KEY=$"($env.SSH_PRIVATE_KEY)" .
docker tag $"($env.PRJ_NAME)-core-base:latest" $"docker.elmec.com/($env.PRJ_HARBOR)/($env.PRJ_NAME)-core-base:latest"
docker image ls
docker run -it 900413ff953e   bash
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $"($env.PRJ_NAME)-core-base:latest" --build-arg SSH_PRIVATE_KEY=$"($env.SSH_PRIVATE_KEY)" .
docker image ls
docker run -it 9e04fa5f5035 bash
docker build --pull --no-cache -f build/core/Dockerfile.core.baseimage -t $"($env.PRJ_NAME)-core-base:latest" --build-arg SSH_PRIVATE_KEY=$"($env.SSH_PRIVATE_KEY)" .
docker image ls
docker image ls | detect columns  | where REPOSITORY =~ "clopin"
docker image ls | detect columns  | where REPOSITORY =~ "clopin" | first
docker image ls | detect columns  | where REPOSITORY =~ "clopin" | first | get ID
docker image ls | detect columns  | where REPOSITORY =~ "clopin" | first | get IMAGE
docker image ls | detect columns  | where REPOSITORY =~ "clopin" | first | get IMAGE | ccp
docker run -it ab27fcfeaab5 bash
z
watch kubectl -n sec-clopin-production get po
watch (kubectl -n sec-clopin-production get po)
kubectl -n sec-clopin-production get po -w
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-dc6fcf558-2rhpm 
z w 
l
z /Users/colombos/projects/work/gitops
l
gcl git@git.elmec.com:security/files-2-db.git
z /Users/colombos/projects/work/files-2-db
l
gb -a
git checkout dark-web-monitoring
l
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-dc6fcf558-2rhpm  -f
l
v
l
ls scripts/
gco -b findings
gco findings
l
git checkout dark-web-monitoring
l
cat .gitlab-ci.yml  | ccp
gco findings
v
z w gitops 2
z w gitops files2
z w gitops
l
z files-2-db
l
gco findings
l
open ~/projects/work/
open ~/projects/work/clopin/repos/findings/
(ls~/projects/work/clopin/repos/findings/next/ | first | get name)
ls~/projects/work/clopin/repos/findings/next/ | first | get name
ls ~/projects/work/clopin/repos/findings/next/ | first | get name
open (ls ~/projects/work/clopin/repos/findings/next/ | first | get name)
open (ls ~/projects/work/clopin/repos/findings/next/ | first | get name) --raw
open ((ls ~/projects/work/clopin/repos/findings/next/).1 | get name) --raw
ls ~/Downloads/
ls ~/Downloads/output/
mkdir /tmp/findings/
mkdir /tmp/findings/domains/
mkdir /tmp/findings/usernames/
ls ~/Downloads/output/ | where name =~ "Domain"
ls ~/Downloads/output/ | where name =~ "Domain" | each {cp $in /tmp/findings/domains}
ls ~/Downloads/output/ | where name =~ "Domain" | get name | each {cp $in /tmp/findings/domains}
ls /tmp/findings/domains/
ls ~/Downloads/output/ | where name =~ "User" | get name | each {cp $in /tmp/findings/usernames}
open ( (ls /tmp/findings/domains).1 | get name ) --raw
open ( (ls /tmp/findings/domains).1 | get name ) --raw | save --force domain-findings.csv
lzg
v
open ( (ls /tmp/findings/domains).1 | get name ) --raw | save --force domain-findings.csv
l
open domain-findings.csv
z w 
ls **/*files2*
ls **/*files-2*
ls **/*files-2* | get name
rm -rf clopin/files-2-db
rm -rf files-2-db
z /Users/colombos/projects/work/gitops
l
z /Users/colombos/projects/work/gitops/files-2-db
l
z w gitop fil
l
open ( (ls /tmp/findings/domains).1 | get name ) --raw | save --force domain-findings.csv
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-dc6fcf558-2rhpm  -f
source devutils/envs.node.nu
l
open ( (ls /tmp/findings/domains).2 | get name ) --raw | save --force domain-findings.csv
l
rm domain-findings.csv
open ( (ls /tmp/findings/domains).2 | get name ) --raw | save --force domain_findings.csv
source devutils/envs.node.nu
p run.py "--target-project" $env.TARGET_PROJECT "--target-repo" $env.TARGET_REPO "--target-branch" $env.TARGET_BRANCH "--target-file" $env.TARGET_FILE "--target-commit" $env.TARGET_COMMIT 
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-dc6fcf558-2rhpm  -it -- bash
(ls /tmp/findings/domains).1
(ls /tmp/findings/domains).1 | get name
open ( (ls /tmp/findings/domains).2 | get name ) --raw | save --force domain_findings.csv
open ( (ls /tmp/findings/domains).3 | get name ) --raw | save --force domain_findings.csv
open ( (ls /tmp/findings/domains).2 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).2 | get name\
(ls /tmp/findings/domains).2 | get name
(ls /tmp/findings/domains).2 | get name | ccp
open ( (ls /tmp/findings/domains).3 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).3 | get name 
open ( (ls /tmp/findings/domains).4 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).4 | get name 
open ( (ls /tmp/findings/domains).5 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).5 | get name 
open ( (ls /tmp/findings/domains).6 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).6 | get name 
open ( (ls /tmp/findings/domains).7 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).7 | get name 
open ( (ls /tmp/findings/domains).8 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).8 | get name 
open ( (ls /tmp/findings/domains).9 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).9 | get name 
open ( (ls /tmp/findings/domains).10 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).10 | get name 
open ( (ls /tmp/findings/domains).11 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).11 | get name 
open ( (ls /tmp/findings/domains).12 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).12 | get name 
open ( (ls /tmp/findings/domains).13 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).13 | get name 
open ( (ls /tmp/findings/domains).14 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).14 | get name 
open ( (ls /tmp/findings/domains).15 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).15 | get name 
open ( (ls /tmp/findings/domains).16 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).16 | get name 
open ( (ls /tmp/findings/domains).17 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).17 | get name 
open ( (ls /tmp/findings/domains).18 | get name ) --raw | save --force domain-findings.csv
ls /tmp/findings/domains | length 
ls /tmp/findings/domains 
(ls /tmp/findings/domains).18 | get name 
open ( (ls /tmp/findings/domains).19 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).19 | get name 
open ( (ls /tmp/findings/domains).20 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).20 | get name 
open ( (ls /tmp/findings/domains).21 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).21 | get name 
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-dc6fcf558-2rhpm  -f
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-dc6fcf558-2rhpm  -it -- bash
open ( (ls /tmp/findings/domains).1 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).1 | get name 
(ls /tmp/findings/domains).1 | get name | path split 
(ls /tmp/findings/domains).1 | get name | path split | last
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0 10
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 10
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0...10
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0...5
(ls /tmp/findings/domains).1 | get name | path split | last 
str substring --help
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0..5
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0..10
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0..9
(ls /tmp/findings/domains).1 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).2 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).2 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).3 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).3 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).4 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).4 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).5 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).5 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).6 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).6 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).7 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).7 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).8 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).8 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).9 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).9 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).10 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).10 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).11 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).11 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).12 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).12 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).13 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).13 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).14 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).14 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).15 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).15 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).16 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).16 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).17 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).17 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).18 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).18 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).19 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).19 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).10 | get name ) --raw | save --force domain-findings.csv
open ( (ls /tmp/findings/domains).20 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).20 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).21 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).21 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).22 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).22 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).23 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).23 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).24 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).24 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).25 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).25 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).26 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).26 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).27 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).27 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).28 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).28 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).29 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).29 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).30 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).30 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).31 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).31 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/domains).32 | get name ) --raw | save --force domain-findings.csv
open ( (ls /tmp/findings/domains).0 | get name ) --raw | save --force domain-findings.csv
(ls /tmp/findings/domains).0 | get name | path split | last | str substring 0..9 | ccp
ls /tmp/findings/usernames/ | length 
ls /tmp/findings/usernames/ 
ls /tmp/findings/usernames/ | where name ~= "Domain"
ls /tmp/findings/usernames/ | where name =~ "Domain"
ls /tmp/findings/usernames/ | where name =~ "Domain" | each {rm $in}
ls /tmp/findings/usernames/ | where name =~ "Domain" | get name | each {rm $in}
y
ls /tmp/findings/usernames/ 
open ( (ls /tmp/findings/usernames).0 | get name ) --raw | save --force username-findings.csv
(ls /tmp/findings/usernames).0 | get name | path split | last | str substring 0..9 | ccp
open ( (ls /tmp/findings/usernames).1 | get name ) --raw | save --force username-findings.csv
(ls /tmp/findings/usernames).1 | get name | path split | last | str substring 0..9 | ccp
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-dc6fcf558-2rhpm  -f
z conf sc fuz
nu ~/.config/scripts/fuzzy/fk.nu 
z conf sc fuz
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl -n sec-clopin-production get po
v
touch mail.txt
v mail.txt
git checkout dark-web-monitoring
l
rmr scripts/ findings/
l
rmr amend
l
v mail.txt
l
v .gitlab-ci.yml
lzg
kx
kubectl -n sec-skipper-quality get cronjobs
kubectl -n sec-skipper-quality delete cronjobs cleanup-hosts-quality-quality
kubectl -n sec-skipper-quality delete cronjobs update-database-quality-quality
v mail.txt
rmr mail.txt
v
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl -n sec-clopin-quality get po
kx
which kbx
which kx
kubectl config get-contexts 
kubectl config get-contexts | detect columns 
kubectl config get-contexts | detect columns | get NAME
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl get ns
kubectl config get-contexts | detect columns | get NAME
kubectl config set-context k8s03
kubectl config set-context k8s01-QA
kubectl config get-contexts | detect columns | get NAME
kubectl config  delete-context  k8s01-QA
nu ~/.config/scripts/fuzzy/fk.nu 
ls **/asd.pem
ls
rmr ~
cd ~/
l
z w 
ls **/asd.pem
v
cd ..
ls **/asd.pem
cd ..
z conf sc fuz
nu ~/.config/scripts/fuzzy/fk.nu 
l
z conf
ls **/asd.pem
rmr scripts/fuzzy/~/
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl get po -A -o wide
nu ~/.config/scripts/fuzzy/fk.nu 
kubectl get pod -A -o wide
nu ~/.config/scripts/fuzzy/fk.nu 
z w gitop fil
gco PT
l
z conf nv
z w gitop fil
l
yarn
v
asdf plugin-add yarn
asdf install yarn latest<\n>
asdf search yarn
asdf list yarn
asdf global yarn 1.22.22
v
gb -a
git branch -a 
git branch -a | input list 
git branch -a | lines
git branch -a | lines | each {$in | str trim "*"}
git branch -a | lines | each {$in | str trim "\*"}
str trim --help
git branch -a | lines | each {$in | str trim --left --char "*"}
git branch -a | lines | each {$in | str trim --left --char "*" | str trim }
git checkout (git branch -a | lines | each {$in | str trim --left --char "*" | str trim}).4
l
gb
v .
git checkout OSINT_DOMINIO
mv fuzzy/fk.nu ~
cd 
ls
mkdir projects/personal/fk
mv fk.nu projects/personal/fk/
z projects/personal/fk
l
v
ssh-add ~/.ssh/github
gcl git@github.com:lassoColombo/fk.git
l
mv fk.nu fk/
l
z fk
l
lzg
open $env.HOME/.kube/conf
open $"($env.HOME)/.kube/conf"
ls $"($env.HOME)/.kube/"
open $"($env.HOME)/.kube/config"
open $"($env.HOME)/.kube/config" | to yaml 
open $"($env.HOME)/.kube/config" | from yaml 
open $"($env.HOME)/.kube/config" | from yaml | get 'current-context'
kk
kk --asd asd
kk --install
k
l
_fk_cp 
kk
brew list | grep k9
brew uninstall k9s
fk 
greet ciao
source ~/projects/personal/fk/fk/fk.nu<\n>
k
source ~/projects/personal/fk/fk/fk.nu<\n>
z
cd 
cd projects/personal/fk/fk/
source fk.nu
fk
kubectl get po
fk
kubectl get ns
cd
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
vf
cd
cd projects/personal/fk/fk/
source fk.nu
fk
z pr per fk fk
l
source fk.nu
fk
nu fk.nu 
fk
source fk.nu
fk
return --help
def f [x: int]: int -> int { let y = $in; return (2 * $x + $y) }
6 | f 5
v
l
z .local
l
z state
l
z nvim
l
z ..
l
z ..
l
z share
l
z nvim
l
cd .
cd ..
l
cd db_ui/
l
open connections.json
open connections.json | sort-by name
open connections.json --raw
open connections.json | sort-by name | save --force connections.json
fk
f
fk
fk --get
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk
fk --get
source fk.nu
fk --get
cd
cd projects/personal/fk/fk/
source fk.nu
cd 
cd projects/personal/fk/fk/
source fk.nu
fk
fk --get
[1, 2, 3, 4] | into string 
[1, 2, 3, 4] | into string | str join "\n"
[1, 2, 3, 4] | into string | str join "\n" | fzf --multi
fk
cd
cd projects/personal/fk/fk/
source fk.nu
fk
source fk.nu
z pr pe fk fk
fk
open ~/.cache/fk/namespaces.yaml
cd ~/.cache/fk/
l
open namespaces.yaml
rm namespaces.yaml
fk
l
open namespaces.yaml
z
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk --get
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
fk 
fk
source fk.nu
fk
kubectl get po   -A
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
kubectl get restores
fk
fk | where NAME =~ "sentry"
let asd = fk
asd
$asd
print $asd
source fk.nu
fk
let asd = fk
$asd
$asd | where NAME =~ "sentry"
source fk.nu
fk
source fk.nu
fk
which fk
l
pwd
l
cat fk.nu 
cat fk.nu  | wc -l
fk
kubectl -n sec-llama-production logs api-sec-llama-production-79d877946d-46nb8 
kubectl -n sec-llama-production logs api-sec-llama-production-79d877946d-46nb8  -f
fk
kx
fk
source fk.nu
fk
source fk.nu
fk
fk --get
source fk.nu
fk
fk --get
any --help 
source fk.nu
{} | values 
source fk.nu
fk
fk --get
source fk.nu
fk
kx
fk
fk --R
fk -R
fk
source fk.nu
fk
fk --install
fk
kubectl get ns
fk
source fk.nu
fk
fk -R
source fk.nu
fk
find --help | grep depth
find --help | grep max
find --help 
source fk.nu
fk
source fk.nu
co
fk
source fk.nu
fk
source fk.nu
fk
l
open here
rm here
l
source fk.nu
fk
l
rm asd
l
source fk.nu
fk
open asd/
l
cd asd/
l
cd ..
rmr asd/
source fk.nu
fk
source fk.nu
fk
rm asd
so
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
ls /Users/colombos/.cache/fk/
ls /Users/colombos/.cache/fk/cont*
source fk.nu
fk
ls /Users/colombos/.cache/fk/
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
open asd/
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
{} | keys
{} | values
let my_record = { name: "Alice", age: 30, city: "New York" }
$my_record | keys
$my_record | to table | get column0
$my_record | flatten
$my_record 
$my_record | flatten | columns
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
rmr asd
source fk.nu
fk
open cacert.pem
rm cacert.pem
kubectl -n sec-clopin-production get po
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-8l4qk  -it -- bash
l
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-8l4qk -it -- bash
source fk.nu
fk
kubectl get ns -o yaml
source fk.nu
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
open cacert.pem
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
cso
source fk.nu
fk
nu --help 
source fk.nu
z pr pe fk fk
source fk.nu
nu --help 
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
fk | get items
so 
source fk.nu
fk
source fk.nu
fk
fk | get items.2
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
fk --dry
fk --dry-run
source fk.nu
fk
fk --dry-run
source fk.nu
fk --dry-run
source fk.nu
fk
fk --dry-run
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk --dry-run
source fk.nu
fk --dry-run
source fk.nu
fk
fk --dry-run
source fk.nu
fk
fk --dry-run
source fk.nu
fk --dry-run
source fk.nu
fk
fk --dry-run
source fk.nu
fk
fk --dry-run
kubectl -n autom-ac-catalog-production logs backend-autom-ac-catalog-production-b85574c4b-57lbl -f
kubectl -n autom-ac-catalog-production logs backend-autom-ac-catalog-production-b85574c4b-57lbl -f | nu -c
nu -c (fk)
nu -c (fk --dry)
nu -c (fk --dry-run)
fk --dry-run
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
z pr pe fk fk
fk
z pr pe fk fk
fk
fk --dry-run
z pr pe fk fk
fk
z pr pe fk fk
fk
nu asd.nu 
fk
fk --dry-run
v -d simple.txt complec.txt
source fk.nu
fk
source fk.nu
fk
v
l
cd tmp/
l
touch asd.yaml
v asd.yaml
oepn asd.yaml
open asd.yaml
open asd.yaml | to json 
open asd.yaml | to json  | ccp
rm asd.yaml
z htt
l
z /Users/colombos/projects/workl
z 
z /Users/colombos/http/work/skipper
l
fk
kx
fk
z /Users/colombos/http
l
z work
l
z /Users/colombos/http/work/skipper
l
z ht w sk
l
source .env.nu
echo $env.SKIPPER_TOKEN
nu notify.nu 
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
https POST $"( $env.SKIPPER_URI )/mole_notify" "Content-Type:application/json" $"Authorization: STATIC ( $env.SKIPPER_TOKEN )" < (open body.yaml | to json)<\n>
https POST $"( $env.SKIPPER_URI )/mole_notify/" "Content-Type:application/json" $"Authorization: STATIC ( $env.SKIPPER_TOKEN )" < (open body.yaml | to json)<\n>
https POST $"( $env.SKIPPER_URI )/mole_notify/" \<\n>    $"Authorization: STATIC ( $env.SKIPPER_TOKEN )" < (open body.yaml | to json)<\n>
source .env.nu
nu notify.nu 
source .env.nun
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
source .env.nu
nu notify.nu 
v
kx
kubectl -n sec-skipper-quality get cronjobs
kubectl -n sec-skipper-quality edit cronjobs update-database-quality-quality 
kubectl -n sec-skipper-quality create job --from=cronjobs/update-database-quality-quality test -o yaml --dry-run=client
kubectl -n sec-skipper-quality create job --from=cronjobs/update-database-quality-quality test -o yaml --dry-run=client | save --force job.yaml
v job.yaml
kubectl apply -f job.yaml 
kubectl -n sec-skipper-quality get po
kubectl -n sec-skipper-quality logs test-624tk  -f
fk
z pr pe fk fk
lk
l
z pr pe fk fk
l
fk --edit
cd projects/personal/fk/fk/
source fk.nu
fk
kx
fk
v
ssh carboter-dmilog02.dmi.elmec.ad 
fk --edit
source fk.nu
z pr pe fk fk
source fk.nu
fk
fk --edit
source fk.nu
fk --edit
source fk.nu
fk
fk --edit
source fk.nu
fk
fk --edit
fk --deletge
fk
fk --get --dry-run
kubectl -n sec-clopin-production get pod | from yaml
fk --delete
kubectl -n sec-clopin-production get po
fk
fk --delete | each {$in}
fk
source fk.nu
fk
l
open asd.pem
rm asd.nu asd.pem
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
fk 
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
fk | first
z pr pe fk fk
fk
fk | first
fk --dry 
fk
kubectl -n sec-clopin-production get pod -o wide
kubectl -n sec-clopin-production get pod -o wide | detect columns 
l
z pr pe fk fk
fk
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production  -o yaml | from yaml 
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production  -o yaml | from yaml | get spec.replicas
cd projects/personal/fk/fk/
cd 
cd projects/personal/fk/fk/
source fk.nu
z pr pe fk fk
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
ls
z pr pe fk fk
v
z pr pe fk fk
fk
source fk.nu
fk
fk -C
$current_contex
let asd = open $"($env.HOME)/.kube/config" | from yaml | get 'current-context'
$asd
let current_context = open $"($env.HOME)/.kube/config" | from yaml | get 'current-context'
$current_contex
let asd = open $"($env.HOME)/.kube/config" | from yaml | get 'current-context'
$asd
let cache_dir = $"($cache_dir)/contexts.yaml"
let cache_dir = ~/.cache/fk/contexts.yaml
let cache_dir = "~/.cache/fk/contexts.yaml"
open $cache_dir
ls ~/.cache/fk/
let cache_dir = "/Users/colombos/.cache/fk/contexts.yaml"
open $cache_dir
let contexts = open $cache_dir
$contexts
$contexts | flatten | columns | any {$in == $asd}
let current_namespaces = $contexts | get $asd
$current_namespaces
kx
let asd = open $"($env.HOME)/.kube/config" | from yaml | get 'current-context'
$asd
ls $cache_dir | where name =~ "contexts.yaml" | is-empty
$contexts | flatten | columns | any {$in == $asd}
let current_namespaces = kubectl get ns | detect columns | get NAME
$contexts | upsert $asd $current_namespaces 
fk
trim --help
str trim --help
source fk.nu
$"( $env.fk_home_dir )/src/utils/cache.nu"
source $"( $env.fk_home_dir )/src/utils/cache.nu"
let asd = $"( $env.fk_home_dir )/src/utils/cache.nu"
$asd
source $asd
const asd = $"( $env.fk_home_dir )/src/utils/cache.nu"
const s =asd
const s = asd
const ss = $"( $env.fk_home_dir )/src/utils/cache.nu"
const ss = $"( fk_home_dir )/src/utils/cache.nu"
const ss = $"( $fk_home_dir )/src/utils/cache.nu"
ss
source $ss
fk -I
source $ss
source fk.nu
fk -I
source fk.nu
fk -I
source fk.nu
fk -I
so 
source fk.nu
fk -I
source fk.nu
fk -I
source fk.nu
fk -I
sou
source fk.nu
v
fk -I
source fk.nu
fk -I
ansi gradient 
fk -I
fk
fk -I
source fk.nu
fk -I
source fk.nu
fk -I
fzf ~/.config
ls ~/.config/** | where type == dir
ls ~/.config/** | where type == dir | str join "\n" | fzf
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --preview {cat $in}
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --preview 'cat {}'
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --preview 'ls {}'
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --preview 'open {}'
def hello [] {<\n>print hello<\n>}
hello
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf -b hello
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --bind=ctrl-t:execute@hello
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --bind 'ctrl-x:execute(hello {})'
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --bind 'ctrl-x:execute(echo ciao)'
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --bind 'ctrl-x:execute(touch spazzatura)'
l
fk
kubectl get po
kubectl -n sec-securityproject-quality get po
fk
kx
source fk.nu
fk
source fk.nu
fk
kx
fk
source fk.nu
fk
fk --dry
fk
source fk.nu
fk
fj
fk
source fk.nu
fk
source fk.nu
fk
fk | where AGE < 3day
fk | where (AGE | into datetime) < 3day
fk | where AGE | into datetime < 3day
fk
source fk.nu
fk
z pr pe fk fk
history | where command | str contains "fzf"
history | where command =~ "fzf"
def hello [] {<\n>print hello<\n>}
ls ~/.config/** | where type == dir | get name  | str join "\n" | fzf --bind 'ctrl-x:execute(hello)'
fk
fk --dry
cd projects/personal/fk/fk/
source fk.nu
fk
fk --cp --dry --clip
fk --copy --dry --clip
fk --copy --dry 
fk --copy --clip
l
rm asd.pem
fk
fk --delete --clip --dry
fk --delete --dry
kubectl -n sec-clopin-production get po -w
fk --delete --clip
fk
fk --edit --clip --dry
fk --edit --dry
fk --edit --clip
fk --delete 
kubectl -n sec-clopin-production get po -w
fk --edit
fk --edit --dry
fk --edit --dry --clip
fk --edit --dry 
fk --edit --clip
fk
fk --clip
fk
fk --clip
fk
history | where command =~ "irca"
history | where command =~ "ssh"
history | where command =~ "ssh" | where command =~ "-L"
history | where command =~ "ssh irca"
ssh ColomboS@elmecdmi.local@ircaspa-dmi04.dmi.elmec.ad     -L 8006:172.25.6.50:443
ssh ColomboS@elmecdmi.local@ircaspa-dmi03.dmi.elmec.ad     -L 8006:172.25.6.50:443
fk
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-l9rp7 -- find /usr -maxdepth 5 -name '*.pem' -type f
let found = kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-l9rp7 -- find /usr -maxdepth 5 -name '*.pem' -type f
$found
fk
l
rm asd.pem
z pr pe fk fk
fk
rm asd.pem
fk --copy --dry --clip
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-l9rp7 -- find /usr -maxdepth 5 -type d
fk
ls ASD/
rmr ASD/
fk
fk --get
fk --get --dry --clip
fk
fk --get --dry --clip
1 | into string 
cd projects/personal/fk/fk/
source fk.nu
fk
fk --get --dry --clip
to nuon --help
fk
fk --get --dry --clip
fk --get 
fk
fk | get NAME
fk --clip
[[NAME, READY, UP-TO-DATE, AVAILABLE, AGE]; [clopin-sec-clopin-production, "1/1", "1", "1", "193d"]] | describe
[[NAME, READY, UP-TO-DATE, AVAILABLE, AGE]; [clopin-sec-clopin-production, "1/1", "1", "1", "193d"]] | get NAME
[[NAME, READY, UP-TO-DATE, AVAILABLE, AGE]; [clopin-sec-clopin-production, "1/1", "1", "1", "193d"]] | get READY
fk --dry
fk --dry --delete
fk
fk | where NAME =~ "clopin"
let clop = fk | where NAME =~ "clopin"
$clop
$clop | get NAME
$clop | get NAME | first
$clop | get NAME | first | ccp
fk
let asd = fk
$asd
$asd | to yaml 
let asd = fk
fk --clip
fk --dry --clip
kubectl -n sec-securityproject-production get deployment api-sec-securityproject-production
fk --dry --clip
fk --clip
fk
fk --clip
fk --clip --dry
kubectl -n sec-clopin-production get deployment clopin-sec-clopin-production -o yaml
fk --clip 
fk
doc ls
ls ../../**/docker*.y*ml
ls ../../**/docker*.y*ml | first | get name
docker-compose -f (ls ../../**/docker*.y*ml | first | get name) up -d
source ../../devutils/configs/carboter02.env
go run main.go --config ../../devutils/configs/carboter01.yaml  
l
go run --config ../../devutils/configs/carboter02.yaml
l
go run main.go --config ../../devutils/configs/carboter02.yaml
v
v
l
fk
fk -I
v
go run main.go --config ../../devutils/configs/carboter02.yaml
brew list | grep clip
brew search maccy
berw install maccy
brew install maccy
maccy
doc ls
docker-compose -f (ls ../../**/docker*.y*ml | first | get name) up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
l
source ../../devutils/configs/carboter02.env
go run main.go --config ../../devutils/configs/carboter02.yaml
docker container ls
docker container ls | detect columns  
docker container ls | detect columns  | first
docker container ls | detect columns  | first | get NAMES
go run main.go --config ../../devutils/configs/carboter02.yaml
z w 
l
z test
l
z phenix
l
z w se se
l
z htt
z work
l
z pegasus
l
z sophos
l
z htt wor peg sop
l
source .lamberti.env.sh
(https  https://api4.central.sophos.com/gateway/siem/v1/alerts<\n>from_date==1729029600<\n>limit==10<\n>"X-Locale: en"<\n>"accept: application/json"<\n>"Authorization: Basic $AUTH"<\n>"x-api-key: $XAPI")<\n>
(https  https://api4.central.sophos.com/gateway/siem/v1/alerts<\n>"from_date==1729029600"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>"Authorization: Basic ( $env.AUTH )"<\n>"x-api-key: ( $env.XAPI )")<\n>
(https  https://api4.central.sophos.com/gateway/siem/v1/alerts<\n>"from_date==1729029600"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )")<\n>
2024-03-03
2024-03-03 | timeit 
'Last Friday at 19:45' | into datetime<\n>
fk
fk
fk --dry --clip
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml 
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.volumes
p
(https  https://api4.central.sophos.com/gateway/siem/v1/alerts<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )")<\n>
(https  https://api4.central.sophos.com/gateway/siem/v1/alerts<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json <\n>
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json <\n>
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items<\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==1000"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items <\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items <\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.created_at}<\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.created_at} | sort<\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.created_at} | into datetime <\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.created_at} | into datetime | sort<\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.severity} | into datetime | sort<\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.severity} <\n> 
(https  https://api4.central.sophos.com/gateway/siem/v1/events<\n>"from_date==1731452400"<\n>"limit==10"<\n>"X-Locale: en"<\n>"accept: application/json"<\n>$"Authorization: Basic ( $env.AUTH )"<\n>$"x-api-key: ( $env.XAPI )") | from json | get items | each {$in.severity} | str upcase <\n>
v
z pr pe fk fk
l
fk
commandline edit --help 
let asd = "asd"
$asd | length 
$asd
length --help 
cd projects/personal/fk/fk/
source .lamberti.env.sh
source fk.nu
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk --run
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk
fk --dry
fk --dry | str upcase 
z pr pe fk fk
fk --dry | str upcase 
fk --dry 
fk --get
cd projects/personal/fk/fk/
fk
fk --get
z pr pe fk fk
source fk.nu
fk
fk --get
fk
fk --get
kubectl -n sec-clopin-production get po -o yaml | from yaml 
fk --get
let asd = "asd"
$asd | str length 
cd projects/personal/fk/fk/
source fk.nu
fk --get
source fk.nu
z pr pe fk fk
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
fk --get
fk --get --run
fk --get --dry
fk --get --dry --clip
fk
v phenix-models.yaml
fk
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7
fk --run
fk
kubectl -n sec-llama-production get pod api-sec-llama-production-79d877946d-46nb8
fk --run
fk --run | where secret != null
fk --run 
fk --run | where secret != null
fk --run 
fk
fk --run 
fk --run | get name
fk --run | columns
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
z conf fk
z pr pe fk fk
fssh
cal
2024-11-19
2024-11-19 10:30:30
v
fk
kubectl cp sec-clopin-production/clopin-sec-clopin-production-56ff8c95c6-l9rp7:/usr/lib/python3/dist-packages/certifi/cacert.pem asd.pem
rm asd.pem
v
ls ../../**/carboter*.env | first | get name
source (ls ../../**/carboter*.env | first | get name)
ls ../../**/carboter*.env | first | get name
source (ls ../../**/carboter*.env | first | get name)
let env_file = (ls ../../**/carboter*.env | first | get name)
$env_file
source $env_file
const env_file = (ls ../../**/carboter*.env | first | get name)
source ../../devutils/configs/carboter02.env
docker container ls | detect columns  | first | get NAMES
v
go run main.go --config ../../devutils/configs/carboter02.yaml
source ../../devutils/configs/carboter02.env
go run main.go --config ../../devutils/configs/carboter02.yaml
fk
kubectl cp sec-llama-production/api-sec-llama-production-79d877946d-46nb8:/usr/lib/python3/dist-packages/certifi/cacert.pem asd.pem
open asd.pem
rm asd.pem
fk
kubectl api-versions 
kubectl completion 
kubectl completion -h
kubectl describe -h
kubectl -n sec-clopin-production describe deployments clopin-sec-clopin-production | from yaml 
kubectl -n sec-clopin-production describe deployments clopin-sec-clopin-production 
kubectl -n sec-clopin-production describe deployments clopin-sec-clopin-production -o yaml
kubectl describe namespaces -a
kubectl describe namespaces -A
fk
kubectl describe namespaces 
kubectl -n sec-securityproject-production describe deployments 
kubectl -n sec-securityproject-production describe deployment 
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk
source fk.nu
fk
kubectl describe pod -A
fk
kubectl -n sec-clopin-production get deployment clopin-sec-clopin-production
source fk.nu
fk
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7
fk
kubectl -n sec-clopin-production describe pod clopin-sec-clopin-production-56ff8c95c6-l9rp7
v
napp | ccp
v
napp | ccp
v
cd
cd .local/share/db_ui/
l
open connections.json | sort-by name | save --force connections.json
ssh besteuro-dmilog01.dmi.elmec.ad 
ssh besteuro-dmi01.dmi.elmec.ad 
kubectl rollout history 
kubectl rollout history -n sec-clopin-production 
kubectl rollout history -n sec-clopin-production deployments/clopin-sec-clopin-production 
kubectl rollout history -n sec-clopin-production deployments/clopin-sec-clopin-production | detect columns 
kubectl -n sec-clopin-production rollout 
kubectl -n sec-clopin-production rollout status 
kubectl -n sec-clopin-production rollout status deployments/clopin-sec-clopin-production 
z pr pe fk fk
source fk.nu
fk
kubectl -n sec-clopin-production rollout history deployment clopin-sec-clopin-production
docker container exec -it redis redis-cli
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
touch providers.table
v providers.table
open providers.table
open providers.table | from csv 
open providers.table | from csv | to yaml 
open providers.table | from csv 
open providers.table | from csv | sort-by IDRS
open providers.table | from csv 
open providers.table | from csv | sort-by idrs
open providers.table | from csv | sort-by idrs | to csv | save --force providers.table
let p = open providers.table
$p
$p | from csv | sort-by idrs | to csv | save --force providers.table
open providers.table | from csv 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
docker run -it redis redis-cli
docker exec -it redis redis-cli
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
ls
mv providers.table providers.csv
open providers.csv
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
doco -f ../../devutils/docker-compose.yaml up -d
docker container stop redis 
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk
kubectl -n sec-clopin-production get pod
fk
kubectl -n sec-clopin-production get pod -o wide | detect columns 
fk
kubectl -n sec-clopin-production get pod | detect columns
fk --run
fk --dry
fk --clip 
fk --dry --clip
kubectl -n sec-clopin-production get pod | detect columns
fk --clip
kubectl -n sec-clopin-production get pod | detect columns
source fk.nu
fk
fk --run
open providers.csv
fk
kubectl -n sec-clopin-production get pod | detect columns
fk --run
ssh cesarin-dmi01.dmi.elmec.ad 
ssh cesarin-dmilog01.dmi.elmec.ad 
ssh ircaspa-dmilog04.dmi.elmec.ad -L 8006:172.25.6.51:8006
ssh cesarin-dmilog01.dmi.elmec.ad -L 8006:172.25.6.51:8006
ssh ircaspa-dmi04.dmi.elmec.ad -L 8006:172.25.6.50:8006
ssh cesarin-dmilog01.dmi.elmec.ad -L 8006:172.25.6.51:8006
ssh ircaspa-dmi04.dmi.elmec.ad -L 8006:172.25.6.50:8006
ssh cesarin-dmilog01.dmi.elmec.ad -L 8006:172.25.6.51:8006
z htt
l
z /Users/colombos/http/work
l
z w cl cl 
l
z node
l
kl
l
mkdir clopin
cd clopin/
touch .envs.nu
vi .envs.nu 
z htt
l
z work
l
z /Users/colombos/projects/work/pegasus/pegasusl
z pegasus
l
z microsoft
l
v
z ..
z clopin
l
source .envs.nu
open customers.nu
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json' <\n>)<\n>
fk
kubectl -n sec-clopin-production describe pod clopin-sec-clopin-production-56ff8c95c6-l9rp7
fk
kubectl -n sec-securityproject-production get job refresh-siem-timeline-production-28859280 | detect columns
fk 
kubectl -n sec-securityproject-production get job refresh-siem-timeline-production-28859280
fk --run
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
fk
fk --get
kubectl -n autom-ac-catalog-production get pod backend-autom-ac-catalog-production-b85574c4b-57lbl -o yaml | from yaml
fk --get
fk
fk --get
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o json
fk --get
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o wide | detect columns
z htt w cl
l
source .envs.nu
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json') | from json <\n>
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json') | from json  | sort-by  id<\n>
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json') | from json  | sort-by  id | first<\n>
ssh ircaspa-dmi04.dmi.elmec.ad -L 8007:172.25.6.50:443
ssh cesarin-dmilog01.dmi.elmec.ad -L 8006:172.25.6.50:443
ssh cesarin-dmilog01.dmi.elmec.ad -L 8007:172.25.6.50:443
ssh ircaspa-dmi04.dmi.elmec.ad -L 8007:172.25.6.50:443
fk
fk --get
fk
fk --get
kubectl -n sec-clopin-production get pod clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml
fk
fk --get
let fields = ["asd"]
$fields | append "asdasd"
$fields
$fields = $fields | append "Aasdds"
z pr pe fk fk
kubectl get resourcequotas
kubectl api-resources 
v
kubectl api-resources | get NAME
kubectl api-resources | detect columns | get NAME
fk -z
ls ~/.cache/fk/
ls ~/.cache/fk/ | get NAME
ls ~/.cache/fk/ | get NAME | each {open $in}
ls ~/.cache/fk/ | get NAME | each {rm $in}
v
source fk.nu
so
source fk.nu
fk
ls ~/.cache/fk/ | get NAME | each {rm $in}
fk
fk --logs
fk
ls ~/.cache/fk/ | get NAME | each {rm $in}
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk
fk -z
fk
fk -z
fk --logs
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk --get
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o json
source fk.nu
fk
kubectl -n sec-clopin-production edit pods clopin-sec-clopin-production-56ff8c95c6-l9rp7
fk
fk --cip
fk --clip
fk --clip --dry
source fk.nu
fk
open ~/.cache/fk/cache.yaml
source $"( $fk_home_dir )/src/kube/current_context.nu"
let current_context = _fk_current_context 
$current_context
mut contexts = open $cache_path
mut contexts = open ~/.cache/fk/cache.yaml
$contexts | flatten | columns | any {$in == $current_context}
$contexts | flatten | columns }
$contexts | flatten | columns 
$contexts 
$contexts | columns
fk
kubectl -n autom-anomaly-detection-production logs anomalyd-flaskapp-autom-anomaly-detection-production-7945fn9r5n 
fk --get --run
fk --get --dry 
fk --get --dry --clip
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | detect columns
fk --rollout
fk --logs
fk -r
kubectl -n autom-agentx-docs-production rollout status namespaces autom-agentx-be-production
fk -r
kubectl -n sec-clopin-production rollout status deployments static-sec-clopin-production
fk -r
fk
fk -r
fk
fk -r
fk
fk -r
v
z pr pe fk fk
fk
l
fk
z pr pe fk fk
z
z conf
l
mkdir fk
cd fk
touch fk.yaml
$env.XDG_CONFIG_HOME
$env.asd
env
$env
$env | get HOME
$env | get asd
$env.asd?
let h = $env.XDG_CONFIG_HOME
$h
$h | path expand 
$h
$h | str join 
str join  --help 
$h | path join 
[$h, "asd/asd" ] | path join 
path --help 
$env.XDG_CONFIG_HOME | path parse
z pr pe fk fk
source fk.nu
commands
help commands 
help commands | where description =~ "*create*file*"
help commands | where description =~ "create"
help commands | where description =~ "create" | where description =~ "file"
use std/iters
use std
source fk.nu
fk
source fk.nu
fk
z pr pe fk fk
source fk.nu
fk
source fk.nu
fk
{} | into string 
{} | to nuon
source fk.nu
fk
source fk.nu
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | detect columns
let my_record = {a: true, b: false, c: true}<\n>
$my_record | each {|pair| if $pair.value { $pair.key } }
$my_record
$my_record | length 
$my_record | columns 
$my_record | columns | length 
$my_record | first
$my_record | transpose asd asdasd
$my_record | transpose asd asdasd | get asd
$my_record | transpose flag value 
source fk.nu
fk --get
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | detect columns
fk
kubectl -n sec-clopin-production get pods | detect columns
fk
kubectl -n sec-clopin-production get pods -o wide | detect columns
fk 
kubectl -n sec-clopin-production get pods -o json
fk 
fk
fk --run
fk --clip 
fk --clip --dry
fk --get
z pr pe fk fk
source fk.nu
fk
fk --get
fk --get --delete
source fk.nu
fk --get 
source fk.nu
fk --get 
source fk.nu
fk
fk --get 
fk --get --delete
source fk.nu
fk --get --delete
source fk.nu
fk --get --delete
fk --get 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml
fk --rollout
kubectl -n sec-clopin-production rollout history deployments clopin-sec-clopin-production
source fk.nu
fk --dry --clip
fk --dry 
fk --logs
source fk.nu
fk
kubectl -n sec-clopin-production get pods | detect columns
fk --get
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get metadata.annotations
source fk.nu
fk --get
z pr pe fk fk
fk --get
source fk.nu
fk --get
kubectl -n sec-clopin-production get pods | detect columns
fk --get
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | describe
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 | describe
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 | describe
(kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 | describe) == "record"
(kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 | describe) =~ "^record"
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.1 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | get 1
ps
ps | where mem > 100.2Mib
ps | sort-by mem
ps | sort-by mem | where name =~ "nvim" 
> cargo install nu_plugin_skim
> plugin add ~/.cargo/bin/nu_plugin_skim
plugin add ~/.cargo/bin/nu_plugin_skim
plugin add /Users/colombos/.asdf/installs/rust/1.82.0/bin/nu_plugin_skim
which nu
which cargo
cargo --version
> cargo uninstall nu_plugin_skim
cargo uninstall nu_plugin_skim
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | columns
1..10
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | length
[asd, asd]
[asd, asd] | str join "."
source fk.nu
fk --inspect
source fk.nu
fk --inspect
source fk.nu
1..10 | into string 
1..10 | each {$in | into str}
1..10 | each {$in | into string}
source fk.nu
fk --inspect
source fk.nu
fk --inspect
source fk.nu
fk
source fk.nu
fk --inspect
z pr pe fk fk
source fk.nu
fk --inspect
fk --inspect | describe
source fk.nu
fk --inspect | describe
z pr pe fk fk
source fk.nu
fk --inspect | describe
fk --inspect | describe | columns
fk --inspect | columns
source fk.nu
fk --inspect 
z pr pe fk fk
fk --inspect 
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk; source fk.nu
z pr pe fk fk
source fk.nu
fk --inspect 
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n autom-ac-catalog-production get pods backend-autom-ac-catalog-production-b85574c4b-57lbl -o yaml | from_yaml | get apiVersion
kubectl -n autom-ac-catalog-production get pods backend-autom-ac-catalog-production-b85574c4b-57lbl -o yaml | from yaml | get apiVersion
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | to json
fk 
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion
fk --inspect 
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production | to json
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | to json
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion.apiVersion | to json
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion.apiVersion 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion | to json
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion | to yaml
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion 
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion 
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
source fk.nu
z 
source fk.nu
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get this | to json
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get  | to json
source fk.nu
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | to json
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | to json
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion | to json
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion
fk --inspect 
fk --inspect --run
z pr pe fk fk
source fk.nu
fk --inspect --run
z pr pe fk fk
source fk.nu
fk --inspect --run
fk --inspect --dry --clip
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get kind
fk --inspect --run --clip
fk --inspect --run 
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion
fk --inspect 
source fk.nu
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
source fk.nu
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get kind
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec | to json
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec 
fk --inspect 
[1,2]
[1,2] | get 0
[1,2].0
[1,2] | get 0
[1,2] | get 1
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.0
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | get 0
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec | to json
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec 
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec | describe
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.0
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.contaienrs
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.containers
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.containers.0
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.containers.0.image
z pr pe fk fk
source fk.nu
fk --inspect 
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.terminationGracePeriodSeconds
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
z pr pe fk fk
source fk.nu
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion
fk --inspect 
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers | describe
z pr pe fk fk
z conf
z nu
l
fk
fk 
fk
kubectl -n sec-clopin-production get pods | detect columns
fk
kubectl -n sec-clopin-production get pods | detect columns
fk
kubectl -n sec-clopin-production get deployments | detect columns
fk
kubectl -n sec-llama-production get cronjobs -o yaml | from yaml
fk 
kubectl -n sec-llama-production logs api-sec-llama-production-79d877946d-c4pd8 
fk
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-l9rp7 -it -- bash
fk
kubectl -n sec-clopin-production edit deployments clopin-sec-clopin-production
fk --run
fk --get
fk --gR
fk -g -R
fk -l -R
fk -l 
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-l9rp7 -f
fk
fk --edit
fk
kubectl -n sec-clopin-production describe deployments
fk
kubectl -n sec-clopin-production describe deployments clopin-sec-clopin-production
fk
kubectl -n sec-securityproject-production rollout status cronjobs refresh-siem-timeline-production
fk 0i
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
fk --inspect 
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get apiVersion
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers
fk
fk -i
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers
fk -i
cd projects/personal/fk/fk/
source fk.nu
nu
fk -i
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers
fk -i
2 | into cell-path 
'asd' | into cell-path 
fk -i
cd projects/personal/fk/fk/
source fk.nu
fk -i
"1" | into int 
"asd" | into int 
cd projects/personal/fk/fk/
source fk.nu
0..10 | each { $in | into cell-path}
match --help
fk -i
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.0.image
fk -i
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get spec.containers.0
cd projects/personal/fk/fk/
source fk.nu
fzf
fzf --header 'asd'
cd projects/personal/fk/fk/
source fk.nu
nu
v
nu
nu
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
nu
nu
fk -o
fk -g
z pr pe fk fk
ls src/kube/current_context.nu
ls src/kube/current_context.nu | get name
ls src/kube/current_context.nu | get name | first
ls src/kube/current_context.nu | get name
ls src/kube/current_context.nu | get name | first
let pp = ls src/kube/current_context.nu | get name | first
$pp
use $pp
use src/kube/current_context.nu
current_context fk_current_context 
nu
fk
fk -z
fk
fk -z
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml
fk -i
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 -o yaml | from yaml | get metadata.labels
fk -i
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.containers.0.ports
fk -i
kubectl -n sec-clopin-production get deployments clopin-sec-clopin-production -o yaml | from yaml | get spec.template.spec.imagePullSecrets
fk -i
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-l9rp7 | detect columns
fk -g -C -O
kubectl -n sec-clopin-production get serviceaccounts
fk -g
kubectl -n sec-clopin-production get serviceaccounts default -o yaml | from yaml
fk -g
kubectl -n sec-clopin-production get services svc-clopin-production-clopin-api -o yaml | from yaml
kubectl attach -h
kubectl logs -h
l
fk
kubectl -n sec-clopin-production get pods -o wide | detect columns
kubectl logs -h
fk
kubectl -n sec-llama-production get po api-sec-llama-production-79d877946d-c4pd8 | get spec
kubectl -n sec-llama-production get po api-sec-llama-production-79d877946d-c4pd8 -o yaml | from yaml | get spec
kubectl -n sec-llama-production get po backend-tasks-sec-llama-production-2 -o yaml | from yaml | get spec.containers
kubectl -n sec-llama-production get po backend-tasks-sec-llama-production-2 -o yaml | from yaml | get spec.containers.*.names
kubectl -n sec-llama-production get po backend-tasks-sec-llama-production-2 -o yaml | from yaml | get spec.containers | each {$in.name}
kubectl -n sec-llama-production get po backend-tasks-sec-llama-production-2 -o yaml | from yaml | get spec.containers.name
fk
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-nkzgn -c core -f
fk
kubectl -n sec-llama-production logs backend-tasks-sec-llama-production-0 -c worker 
kubectl logs -h
kubectl exec -h
kubectl cp -h
kubectl delete -f
kubectl delete -h
kubectl describe -h
fk
kubectl attach -h
kf
fk
kubectl -n sec-clopin-production exec clopin-sec-clopin-production-56ff8c95c6-nkzgn -c core -i -t -- bash
kubectl attach -h
fk
kubectl -n sec-clopin-production attach clopin-sec-clopin-production-56ff8c95c6-nkzgn -c core -it
kubectl cluster-info
kubectl create -h
ls --help
kubectl create -h
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
cd projects/personal/fk/fk/
source fk.nu
fk
glob *
glob ./projects/work/
glob ./projects/work/ansibles/dmilog-ansible/README.md --depth 2
glob ./* --no-dir --depth 5
ls
l
glob ./* --no-dir --depth 5
glob ./* --no-dir --depth 10
glob ./* --depth 10
glob --help 
cd projects/work/
glob * --depth 6
l
glob **/* --depth 6
cd
glob ./projects/work/**/* --depth 6
fk
glob ./projects/work/**/* --depth 6
fk
kubectl create jobs test --from=jobs/refresh-siem-timeline-production-28863600 --dry-run=client -o yaml | from yaml
kubectl create job test --from
kubectl create jobs test --from
fk
kubectl create job test --from=job/refresh-siem-timeline-production-28863600 --dry-run=client -o yaml | from yaml
fk
cd projects/work/
source fk.nu
cd
cd projects/personal/fk/fk/
source fk.nu
fk
kubectl create job test --from=sec-securityproject-production/job/refresh-siem-timeline-production-28863600 --dry-run=client -o yaml | from yaml
ssh bottver-dmilog03.dmi.elmec.ad 
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-nkzgn | detect columns
fk
kubectl -n sec-llama-production logs api-sec-llama-production-79d877946d-c4pd8 -c api -f
ssh cesarin-dmilog01.dmi.elmec.ad 
v
ssh bottver-dmilog03.dmi.elmec.ad 
doc ls
l
docker-compose -f (ls ../../**/docker*.y*ml | first | get name) up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
source (ls ../../**/carboter*.env | first | get name)
source ../../devutils/configs/carboter02.env
go run main.go --config ../../devutils/configs/carboter02.yaml
v
s w skipper
z w sk]
z w sl
z w sk
l
lzg
l
cd ..
ls
rmr skipper
l
z
z w 
z skipper
l
lz
lzg
doc ls
docker container exec -it hopeful_agnesi  sh
doc ls
z w sk
l
docker stop hopeful_agnesi 
source .build.envs.sh
doc ls
docker container exec -it hardcore_carson sh
fk
kx
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality get pods | detect columns
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
kubectl -n sec-skipper-quality get pods -w | detect columns
kubectl -n sec-skipper-quality get pods -w 
fk
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-fc85cfd8c-9zsdn -c skipper -f
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
kubectl -n sec-skipper-quality get pods -w 
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
kubectl -n sec-skipper-quality get pods -w 
fk
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-fc85cfd8c-7s4ls -c skipper -f
l
z w peg
l
z /Users/colombos/projects/work/pegasus/pegasus/devutils
l
z scripts
l
z graphs
l
rm -rf venv
pipenv install
lzg
ls ../../../.gitignore | first | get name
v (ls ../../../.gitignore | first | get name)
lzg
v ../../../.gitignore
lzg
v ../../../.gitignore
l
pipenv install -r requirements.txt
rm requirements.txt
v ../../../.gitignore
l
v
l
p bookmark.py --identity gessi-microsoft --manager graph --collector azure.singin
go run main.go --config ../../devutils/configs/carboter02.yaml
fk
kubectl -n sec-skipper-quality describe pods skipper-sec-skipper-quality-96fcc88c6-8cv5b
fk
kubectl -n sec-skipper-quality get pods skipper-sec-skipper-quality-96fcc88c6-8cv5b -o yaml | from yaml | get spec.containers
fk 
kubectl -n sec-skipper-quality get deployments skipper-sec-skipper-quality -o yaml | from yaml
fk
kubectl -n sec-skipper-quality get deployments skipper-sec-skipper-quality -o yaml | from yaml | get spec.template.spec.containers
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
kubectl -n sec-skipper-quality get po -w
fk
kubectl -n sec-skipper-quality get pods skipper-sec-skipper-quality-fc85cfd8c-2ctft -o yaml | from yaml | get spec.containers
kubectl -n sec-skipper-quality get po -w
pipenv shell
p bookmark.py --identity gessi-microsoft --manager graph --collector azure.singin
p bookmark.py --identity gessi_microsoft --manager graph --collector azure.singin
p bookmark.py --identity gessi_microsoft --manager graph --collector azure_singin
p bookmark.py --identity gessi_microsoft --manager graph --collector azure_signin
p bookmark.py --manager gessi_microsoft.graph --collector azure_signin
z w sec sec
p resources.py --manager gessi_microsoft.graph 
p resources.py --manager gessi_microsoft.graph
napp | ccp
p bookmark.py --manager gessi_microsoft.graph --collector azure_signin
l
p bookmark.py --manager gessi_microsoft.graph --kind azure_signin
v
p bookmark.py --manager gessi_microsoft.graph --kind azure_signin
go run main.go --config ../../devutils/configs/carboter02.yaml
p bookmark.py --manager gessi_microsoft.graph --kind azure_signin
kubectl -n sec-skipper-quality get
fk
kubectl -n sec-skipper-quality get pods skipper-sec-skipper-quality-c7968555b-zc5dt -o yaml | from yaml
fk
kubectl -n sec-skipper-quality describe pods skipper-sec-skipper-quality-c7968555b-zc5dt
fk
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-c7968555b-zc5dt -c skipper 
fk
kubectl -n sec-skipper-quality get pods skipper-sec-skipper-quality-c7968555b-zc5dt -o yaml | from yaml | get spec.containers
fk
kubectl -n sec-skipper-quality rollout restart deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality get pods -o wide -w
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-76d6858856-krgkl
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
kubectl -n sec-skipper-quality get pods -o wide -w
fk
kubectl -n sec-skipper-quality exec skipper-sec-skipper-quality-76d87595f-nk4js -c skipper -it -- sh
kubectl -n sec-skipper-quality exec skipper-sec-skipper-quality-76d87595f-nk4js -c skipper -it -- bash
p bookmark.py --identity gessi_microsoft --manager gessi_microsoft.graph --kind azure_signin
p bookmark.py --identity gessi_microsoft --manager graph --kind azure_signin
p resources.py  --identity gessi_microsoft --manager gessi_microsoft
p resources.py  --identity gessi_microsoft --manager graph
docker exec -it redis redis-cli
docker stop redis
doco -f ../../devutils/docker-compose.yaml up -d
docker stop redis
doco -f ../../devutils/docker-compose.yaml up -d
l
source ../../devutils/configs/carboter02.env
doc ls
docker container stop hardcore_carson 
fk
kubectl -n sec-skipper-quality get deployments skipper-sec-skipper-quality -o yaml | from yaml | get spec.template.spec.containers
kubectl -n sec-skipper-quality get deployments skipper-sec-skipper-quality -o yaml | from yaml | get spec.template.spec.containers | columns
kubectl -n sec-skipper-quality get deployments skipper-sec-skipper-quality -o yaml | from yaml | get spec.template.spec.containers | get command
fk 
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality get pods -w
fk 
kubectl -n sec-securityproject-quality edit deployments api-sec-securityproject-quality
fk
kubectl -n sec-skipper-quality describe pods skipper-sec-skipper-quality-5dccd6d664-94ldv
fk
kf
fk
kubectl -n sec-skipper-quality get pods -o yaml | from yaml
kubectl -n sec-skipper-quality get pods 
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-5dccd6d664-94ldv
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
z w sk
fk
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality rollout restart deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality get pods -o wide -w
fk 
kubectl -n sec-skipper-quality edit deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality rollout restart deployments skipper-sec-skipper-quality
fk
kubectl -n sec-skipper-quality get pods -w
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-78dd4c48ff-lkjms
z w sec sec
z w sk
source .build.envs.sh
v
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
docker exec -it redis redis-cli
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
docker stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
v
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doc ls
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
source ../../devutils/configs/carboter02.env
docker exec -it redis redis-cli
docker stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
v
source ../../devutils/configs/carboter02.env
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
v
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doco 
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
v
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
docker exec -it redis redis-cli
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
open /proc/sys/kernel/random/uuid
l
go get github.com/google/uuid
go mod tidy
v
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
c
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
docker exec -it redis redis-cli
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli flushall
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
docker exec -it redis redis-cli flushall
go run main.go --config ../../devutils/configs/carboter02.yaml
z
z downloads
l
start immagine.png
mv immagine.png switch.png
start immagine.png
mv immagine.png drift.png
z
l
doco -f ../../devutils/docker-compose.yaml up -d
docker exec -it redis redis-cli flushall
go run main.go --config ../../devutils/configs/carboter02.yaml
source ../../devutils/configs/carboter02.env
docker stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
fk
kx
fk
kubectl -n sec-clopin-production get pods -o yaml | from yaml
fk 
kubectl -n sec-clopin-production get pods | detect columns
fk --dry --clip
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
doc stop redis
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
go run main.go --config ../../devutils/configs/carboter02.yaml
doco -f ../../devutils/docker-compose.yaml up -d
v
source ../../devutils/configs/carboter02.env
docker exec -it redis redis-cli flushall
go run main.go --config ../../devutils/configs/carboter02.yaml
doc stop redis
docker exec -it redis redis-cli flushall
doco -f ../../devutils/docker-compose.yaml up -d
v
go run main.go --config ../../devutils/configs/carboter02.yaml
doc stop redis
doco -f ../../devutils/docker-compose.yaml up -d
ssh carboter-dmilog02.dmi.elmec.ad 
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client | save --force job.yaml
v job.yaml
kubectl apply -f job.yaml 
fk
kubectl -n sec-trahoproject-production logs test-mlwkg -c pull-group-0 -f
fk
kubectl -n sec-trahoproject-production logs test-mlwkg -c pull-group-0 
z w tr tr
l
rm -rf venv
pipenv install
l
rm Pipfile
pipenv install
ls 
ls  | where name =~ pip
ls  | where name =~ "pip"
ls  | where name =~ "Pip"
ls  | where name =~ "Pip" | get name
rm (ls  | where name =~ "Pip" | get name | first)
l
rm job.yaml
pipenv init
pipenv install -r requirements.txt
python --version
which python
which pip
pip --version
pip list
pip list | detect columns 
pip list | detect columns | where Package =~ "pipenv"
pip list | detect columns | where Package =~ "pipenv" | first | get Package
pip uninstall (pip list | detect columns | where Package =~ "pipenv" | first | get Package)
pip uninstall pipenv
pip install pipenv
pipenv install
deactivate
ls **/*Pip*
rm Pipfile
v requirements.txt
pipenv install
rm Pipfile
ls **/*Pip*
l
mv requirements.txt ..
pipenv install
l
ls **/*requirements*
pipenv install
rm Pipfile
pipenv install
cd ..
l
ls **/*requirements*
cd trahoproject/
l
rm Pipfile
pipenv shell
pwd
cd ..
mv requirements.txt trahoproject/
cd trahoproject/
mv requirements.txt asdasd.txt
rm Pipfile
pipenv install
pipenv install -r asdasd.txt
mv asdasd.txt requirements.txt
v requirements.txt
z w cl cl
ls **/*Pip&
ls **/*Pip*
ls **/*Pip* | where name =~ core
ls **/*Pip* | where name =~ core | second
(ls **/*Pip* | where name =~ core).1
(ls **/*Pip* | where name =~ core).1 | get name
v ((ls **/*Pip* | where name =~ core).1 | get name)
v Pipfile
pipenv update
pipenv install
v Pipfile
pipenv install
l
v Pipfile
pipenv install
v Pipfile
v requirements.txt
v pi
v Pipfile
pipenv install
pipenv shell
pipenv shell
l
rm asd.json
l
v ((ls **/*Pip* | where name =~ core).0 | get name)
lzg
ls **/*env*
(ls **/*env*).1 | get name
((ls **/*env*).1 | get name)
source devutils/envs.traho.prod
v devutils/envs.traho.prod
source devutils/envs.traho.prod
v devutils/envs.traho.prod
source devutils/envs.traho.prod
v devutils/envs.traho.prod
source devutils/envs.traho.prod
p trahoproject/manage.py shell
fk
kubectl -n sec-trahoproject-production exec traho-sec-trahoproject-production-5d8b49f4c6-7bfxc -c api -it -- bash
v
fk
ssh carboter-dmilog02.dmi.elmec.ad 
z w
ls **/*mole*
gcl git@git.elmec.com:security/dmilog-ng/gitops/mole.git --bare
cd mole
l
cd mole.git/
l
napp | ccp
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
l
ls ZONIN/
ls ZUCCHI/
ls **/.gitlab-ci.yml
open CARBOTER/.gitlab-ci.yml
open CARBOTER/.gitlab-ci.yml > /tmp/CI.yml
open CARBOTER/.gitlab-ci.yml | save /tmp/CI.yml
open CARBOTER/.gitlab-ci.yml --raw |  save /tmp/CI.yml
open /tmp/CI.yml --raw
ls **/.gitlab-ci.yml
ls **/.gitlab-ci.yml | each {$in}
ls **/.gitlab-ci.yml | each {open /tmp/CI.yml --raw | save --force $in}
ls **/.gitlab-ci.yml | each {$in}
ls **/.gitlab-ci.yml | get name
ls **/.gitlab-ci.yml | get name | each {open /tmp/CI.yml --raw | save --force $in}
let exclude = ["master", "quality"]<\n>for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    if $exclude | any? { |ex| $ex == $ref } {<\n>        continue<\n>    }<\n>    if (try { cd $ref } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>        open /tmp/<\n>        echo "done with $ref"<\n>        cd ..<\n>    }<\n>}<\n><\n><\n>let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       cd $branch<\n>       # do stuff<\n>}<\n>
let exclude = ["master", "quality"]<\n>for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    if $exclude | any? { |ex| $ex == $ref } {<\n>        continue<\n>    }<\n>    if (try { cd $ref } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>        echo "done with $ref"<\n>        cd ..<\n>    }<\n>}<\n><\n><\n>let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {<\n>   |branch|<\n>       cd $branch<\n>       # do stuff<\n>}<\n>
let exclude = ["master", "quality"]<\n>for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    if $exclude | any? { |ex| $ex == $ref } {<\n>        continue<\n>    }<\n>    if (try { cd $ref } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>        open /tmp/CI.yml | save --force $"( $ref )/.gitlab-ci.yaml"<\n>        echo "done with $ref"<\n>        cd ..<\n>    }<\n>}<\n>
for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    if $ref == "master" or $ref == "quality" or $ref == "main" {<\n>        continue<\n>    }<\n>    if (try { cd $ref } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>        open /tmp/CI.yml | save --force $"( $ref )/.gitlab-ci.yaml"<\n>        echo "done with $ref"<\n>        cd ..<\n>    }<\n>}
z w p sk
napp | ccp
let exclude = ["master", "quality", "main"]<\n>for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    if (try { cd $ref } catch { echo "directory $ref does not exist. skipping" ; continue }) {<\n>        echo "done with $ref"<\n>        cd ..<\n>    }<\n>}
let exclude = ["master", "quality", "main"]<\n>for ref in (git for-each-ref --format='%(refname)' refs/heads/ | each { |it| echo $it | split-column '/' | get 2 }) {<\n>    cd $ref<\n>    echo "done with $ref"<\n>    cd ..<\n>}
git for-each-ref --format='%(refname)' refs/heads/
napp | ccp
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| cd $branch; git add .gitlab-ci.yml; git commit -m "added skipper stage"; git push }<\n>
l
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| cd $branch; git add .gitlab-ci.yml; git commit -m "added skipper stage"; git push --set-upstream origin $branch }
cd BGP/
l
git status
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin BGP
l
ls
cd ..
ls
ls | where type == dir | get name
ls | where type == dir | get name | filter {$in != "hooks"}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git add .gitlab-ci.yml; git commit -m "added skipper stage"; git push --set-upstream origin $in}
cd BONOMI/
l
add .gitlab-ci.yml
git add .gitlab-ci.yml
git commit -m "added skipper stage"
$env.LAST_EXIT_CODE
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git add .gitlab-ci.yml; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git add .gitlab-ci.yml; git commit -m "added skipper stage"; git push --set-upstream origin $in}
l
cd ..
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git add .gitlab-ci.yml; git commit -m "added skipper stage"; git push --set-upstream origin $in}
l
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git add .gitlab-ci.yml; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in}
cd STEFANIA
l
git status
l
git worktree add master
v -d DALDOSS/.gitlab-ci.yml master/.gitlab-ci.yml
cd DALDOSS/
lzg
v .gitlab-ci.yml
open /tmp/CI.yml --raw
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git pull; git add .gitlab-ci.yml; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in}<\n>
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git pull; git add .gitlab-ci.yml | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in}<\n>
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git pull; git add .gitlab-ci.yml | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}<\n>
cd ..
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git pull; git add .gitlab-ci.yml | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}<\n>
fk
kx
fk
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
cd SORIN/
l
cp /tmp/CI.yml | save --force .gitlab-ci.yml 
open /tmp/CI.yml | save --force .gitlab-ci.yml 
open /tmp/CI.yml --raw| save --force .gitlab-ci.yml 
git status
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin SORIN
cd ..
cd VIGILANZA/
open /tmp/CI.yml --raw| save --force .gitlab-ci.yml 
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin VIGILANZA
cd ../TECNICA/
l
open .gitlab-ci.yml
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin VIGILANZA
git push --set-upstream origin TECNICA
git pull
git config pull.ff only
git pull
git status
git rebase
git status
cd ..
l
cd TECNICA/
l
cd ..
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^V"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^T"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
cd TECNICA/
l
git pull
git config pull.ff merge
git pull
l
git config pull.rebase true
git pull
napp | ccp
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
l
z /Users/colombos/projects/work/mole.git
let whitelist = ["main", "master", "quality"]<\n>git for-each-ref --format='%(refname:short)' refs/heads | lines |<\n>   filter {|branch| not ($whitelist | any {|w| $w == $branch}) } |<\n>   each {|branch| git worktree add $branch }<\n>
l
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^T"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}<\n>
git config pull.rebase true
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^T"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}<\n>
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^R"} | each {cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}<\n>
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^R"} | each {print $"(ansi magenta) ( $in )" cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^R"} | each {print $"(ansi magenta) ( $in ) (ansi reset)" cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^R"} | each {print $"(ansi magenta) ( $in ) (ansi reset)"; cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
cd RAVSCOIAT/
l
open .gitlab-ci.yml
git pull
open .gitlab-ci.yml --raw | save --force .gitlab-ci.yml
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git diff
git show .gitlab-ci.yml HEAD~
git show .gitlab-ci.yml ~HEAD
git show .gitlab-ci.yml 
l
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin RAVSCOIAT
git pull
git status
git push
git push --set-upstream origin RAVSCOIAT
lzg
l
open .gitlab-ci.yml
git pull
git status
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git add .gitlab-ci.yml
git statys
git status
git commit -m "added skipper stage"
git push --set-upstream origin RAVSCOIAT
git pull
git push --set-upstream origin RAVSCOIAT --force
cd ..
cd RCHITALIA/
l
git pull
git status
git rebase --abort
git status
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin RCHITALIA
cd ../RESDATA/
l
git status
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git pull
git add .gitlab-ci.yml
git commit -m "added skipper stage"
lzg
git push --set-upstream origin RESDATA
git pull
git push --set-upstream origin RESDATA --force
cd ../RIGANTI/
git rebase --abort
git pull
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
cd ../RONDASPA/
git status
git pull
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin RONDASPA
git push --set-upstream origin RONDASPA --force
cd ..
cd RPE
git status
git pull
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push
git push --set-upstream origin RPE
cd ..
cd RUBRITM/
l
git status
open /tmp/CI.yml --raw | save --force .gitlab-ci.yml
git status
git add .gitlab-ci.yml
git commit -m "added skipper stage"
git push --set-upstream origin RUBRITM
git push --set-upstream origin RUBRITM --force
l
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs" and $in =~ "^M"} | each {print $"(ansi magenta) ( $in ) (ansi reset)"; cd $in; git pull | ignore; try {git add .gitlab-ci.yml} catch {continue} | ignore; git commit -m "added skipper stage" | ignore; git push --set-upstream origin $in | ignore}
open .gitlab-ci.yml
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {print $"(ansi magenta) ($in) (ansi reset)"  open $"($in)/.gitlab-ci.yml" | get notify_skipper }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {print $"(ansi magenta) ($in) (ansi reset)"; open $"($in)/.gitlab-ci.yml" | get notify_skipper }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {if not ( open $"($in)/.gitlab-ci.yml" | get notify_skipper? ) {print $"(ansi magenta) ($in) (ansi reset)"} }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {if not ( open $"($in)/.gitlab-ci.yml" | get notify_skipper? | is-empty ) {print $"(ansi magenta) ($in) (ansi reset)"} }
diff ZUCCHI/.gitlab-ci.yml CARBOTER/.gitlab-ci.yml 
$env.LAST_EXIT_CODE
diff ZUCCHI/.gitlab-ci.yml CARBOTER/mole_networks.lst 
$env.LAST_EXIT_CODE
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {if ( diff $"($in)/.gitlab-ci.yml" /tmp/CI.yml ) {print $"(ansi magenta) ($in) (ansi reset)"} }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {if ( diff $"($in)/.gitlab-ci.yml" /tmp/CI.yml != "" ) {print $"(ansi magenta) ($in) (ansi reset)"} }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {if ( ( diff $"($in)/.gitlab-ci.yml" /tmp/CI.yml ) != "" ) {print $"(ansi magenta) ($in) (ansi reset)"} }
ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"} | each {print $"($in)";  if ( ( diff $"($in)/.gitlab-ci.yml" /tmp/CI.yml ) != "" ) {print $"(ansi magenta) ($in) (ansi reset)"} }
diff ZUCCHI/.gitlab-ci.yml /tmp/
diff ZUCCHI/.gitlab-ci.yml /tmp/CI.yml 
let asd = ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"}<\n>for b in $asd {<\n>    print $b<\n>    if ((diff $"($in)/.gitlab-ci.yml" /tmp/CI.yml) != "") {<\n>       print $"(ansi magenta) ($in) (ansi reset)"<\n>    }<\n>}
$asd
let asd = ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"}<\n>for b in $asd {<\n>    print $b<\n>    if ((diff $"($b)/.gitlab-ci.yml" /tmp/CI.yml) != "") {<\n>       print $"(ansi magenta) ($b) (ansi reset)"<\n>    }<\n>}
let asd = ls | where type == dir | get name | filter {$in != "hooks" and $in != "objects" and $in != "info" and $in != "refs" and $in != "worktrees" and $in != "logs"}<\n>for b in $asd {<\n>    if ((diff $"($b)/.gitlab-ci.yml" /tmp/CI.yml) == "") {<\n>       print $"(ansi magenta) ($b) (ansi reset)"<\n>    }<\n>}
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-c98688d95-65dwm -c skipper -f
z w
l
ls **/*ansi*
cd ansibles/dmilog-ansible/
l
lzg
git rebase --abort
lzg
open jolly-dmilog-ng.yml
open jolly-dmilog-ng.yml --raw
lzg
open jolly-dmilog-ng.yml --raw
lzg
l
ls **/*operator*
v subtasks/jolly-update-operator.yaml
z w ope
v
l
cd dmilog-operator/
l
lzg
git checkout  soldato
l
fssh
ssh carboter-dmilog02.dmi.elmec.ad 
docker exec -it redis redis-cli 
doc ls
docker exec -it redis redis-cli flushall
go run main.go --config ../../devutils/configs/carboter02.yaml
v
l
ls **/*.json
ls **/*.json | get name | each {rm $in}
y
rm --help
which rm
z conf nu
l
which rm
rm --help
v 
l
ls -a
ls
ls **/.*env*
v microsoft/.gessi.env.sh
mv microsoft/.gessi.env.sh microsoft/.gessi.env.nu
source microsoft/.gessi.env.nu
cd microsoft/graph/
l
ls **/.*nu
ls **/*nu
open get-access.nu
open get-access.nu | ccp
ls ../**/*.env
cd ..
l
source .gessi.env.nu
cd graph/
l
open get-access.nu | ccp
# get access<\n>let access = (https --form POST https://login.microsoftonline.com/$TENANT/oauth2/v2.0/token <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $$env.APPLICATION )" <\n>  $"client_secret=($$env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default" | jq -r '.access_token')<\n>$env.APPLICATION
$env.APPLICATION
open get-access.nu | ccp
# get access<\n>let access = (https --form POST https://login.microsoftonline.com/$TENANT/oauth2/v2.0/token <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default" | jq -r '.access_token')<\n>
$access
# get access<\n>https --form POST https://login.microsoftonline.com/$TENANT/oauth2/v2.0/token <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default" <\n>
https --form POST https://login.microsoftonline.com/$TENANT/oauth2/v2.0/token "Content-Type:application/x-www-form-urlencoded" "Accept:text/html" "grant_type=client_credentials" $"client_id=( $env.APPLICATION )" $"client_secret=($env.AUTHKEY)" "scope=https://graph.microsoft.com/.default"<\n>
open get-access.nu | ccp
# get access<\n>https --form --offline POST https://login.microsoftonline.com/$TENANT/oauth2/v2.0/token <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default"<\n>
https --form POST $"https://login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default"<\n>
https --form --offline POST $"https://login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default"<\n>
open get-access.nu | ccp
# get access<\n>https --form POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=($env.AUTHKEY)" <\n>  "scope=https://graph.microsoft.com/.default"<\n>
nu ./get-access.nu 
http --form --offline POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  $"""<\n>    grant_type=client_credentials<\n>    client_id=( $env.APPLICATION )<\n>    client_secret=( $env.AUTHKEY )<\n>    scope=https://graph.microsoft.com/.default<\n>  """<\n>
https --form --offline POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type:application/x-www-form-urlencoded" <\n>  "Accept:text/html" <\n>  $"""<\n>    grant_type=client_credentials<\n>    client_id=( $env.APPLICATION )<\n>    client_secret=( $env.AUTHKEY )<\n>    scope=https://graph.microsoft.com/.default<\n>  """<\n>
nu ./get-access.nu 
open get-access.nu | cc
open get-access.nu | ccp
nu ./get-access.nu 
http --help
http post --help
open get-access.nu | ccp
# get access<\n>https --offline POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type=application/json" <\n>  "Accept=text/html" <\n>  "grant_type=client_credentials" <\n>  $"client_id=( $env.APPLICATION )" <\n>  $"client_secret=( $env.AUTHKEY )" <\n>  "scope=https://graph.microsoft.com/.default"<\n>
nu ./get-access.nu 
https --offline --form POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type=application/json" <\n>  "Accept=text/html" <\n>  $"grant_type=client_credentials\nclient_id=( $env.APPLICATION )\nclient_secret=( $env.AUTHKEY )\nscope=https://graph.microsoft.com/.default"<\n>
https --form POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type=application/json" <\n>  "Accept=text/html" <\n>  $"grant_type=client_credentials\nclient_id=( $env.APPLICATION )\nclient_secret=( $env.AUTHKEY )\nscope=https://graph.microsoft.com/.default"<\n>
https --offline --form POST $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>  "Content-Type=application/json" <\n>  "Accept=text/html" <\n>  $"grant_type=client_credentials\nclient_id=( $env.APPLICATION )\nclient_secret=( $env.AUTHKEY )\nscope=https://graph.microsoft.com/.default"<\n>
nu ./get-access.nu 
cd get-access/
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" |<\n>  http post $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" <\n>
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" <\n>
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | from yaml | to json |<\n> 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | from yaml | to json |<\n>  http post $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | from yaml | to json <\n>
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json <\n>
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json <\n>  http post $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json |<\n>  http post $"login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json |<\n>  http post $"https://login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json<\n>
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json |<\n>  http post $"https://login.microsoftonline.com/( $env.TENANT )/oauth2/v2.0/token" 
open body.yaml |<\n>  upsert client_id $"($env.APPLICATION)" |<\n>  upsert client_secret $"($env.AUTHKEY)" | to json <\n>
cd ..
rm -rf get-access/
l
http --form POST https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token \<\n>  Content-Type:application/x-www-form-urlencoded \<\n>  Accept:text/html \<\n>  grant_type=client_credentials \<\n>  client_id=($env.APPLICATION) \<\n>  client_secret=($env.AUTHKEY) \<\n>  scope=https://graph.microsoft.com/.default | from json | get access_token<\n>
https --form POST https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token \<\n>  Content-Type:application/x-www-form-urlencoded \<\n>  Accept:text/html \<\n>  grant_type=client_credentials \<\n>  client_id=($env.APPLICATION) \<\n>  client_secret=($env.AUTHKEY) \<\n>  scope=https://graph.microsoft.com/.default | from json | get access_token<\n>
https --form POST https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token \<\n>  Content-Type:application/x-www-form-urlencoded \<\n>  Accept:text/html \<\n>  grant_type=client_credentials \<\n>  client_id=($env.APPLICATION) \<\n>  client_secret=($env.AUTHKEY) \<\n>  "scope=https://graph.microsoft.com/.default" | from json | get access_token<\n>
which https
z conf nu
v
cd
cd .config/nushell/
v
nvim
which https | fget path
which https 
z conf nu
v
which https | fget path
z conf nu
v
which https | first | get path 
which https | first | get path | path expand 
which https | first | get path | path expand | path split 
which https | first | get path | path expand | path split | 0..7
which https | first | get path | path expand | path split 
which https | first | get path | path expand | path split | select 0..-2
which https | first | get path | path expand | path split | first -1
first --help
which https | first | get path | path expand | path split 
which https | first | get path | path expand | path split | first 8
which https | first | get path | path expand | path split | first 8 | path join 
which https | first | get path | path expand | path split | first 8 | path join | ls
ls (which https | first | get path | path expand | path split | first 8 | path join)
z conf nu
v
which http
http
source ../../microsoft/.gessi.env.nu
$env.APPLICATION
nu ./get-access.nu 
https --form --offline POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  $"client_id=( $env.APPLICATION )"<\n>  $"client_secret=( $env.AUTHKEY )"<\n>  "grant_type=client_credentials"<\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" | to json |<\n>https --form --offline POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" | to json |<\n>https --offline POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" | to json |<\n>https POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" | to json |<\n>https --offline POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" <\n>
open asd.yaml | upsert client_id $"($env.APPLICATION)" | upsert client_secret $"($env.AUTHKEY)" | to json |<\n>https --offline POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.yaml \<\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)" <\n>| flatten 
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)" <\n>| flatten 
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)" <\n>
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)" |<\n>
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"<\n>| flatten
format --help
format pattern --help
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"<\n>| flatten<\n>| format pattern "{name}={value}"
format pattern --help
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"<\n>| format pattern "{name}={value}"
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"<\n>
open asd.yaml <\n>| upsert client_id $"($env.APPLICATION)" <\n>| upsert client_secret $"($env.AUTHKEY)"<\n>| each {$in}
open asd.txt
open asd.txt | str join 
open asd.txt | str contains 
open asd.txt 
let raw_content = (open asd.txt)<\n>
$raw_content
let templated_content = ($raw_content | str replace '($env.APPLICATION)' ($env.APPLICATION) | str replace '($env.AUTHKEY)' ($env.AUTHKEY))<\n>
$templated_content
$templated_content | https --offline POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
$templated_content | https POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
$templated_content | https --form POST "https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
$templated_content | https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --offline POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open asd.txt 
open get-access.nu | ccp
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --offline --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | from json<\n> 
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | jq | from json<\n> 
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | jq <\n> 
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" <\n> 
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https --form POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | from json
https --help
open get-access.nu | ccp
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | from hson<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | from json<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | jq<\n>
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" <\n>
https --help
open get-access.nu | ccp
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
open get-access.nu | ccp
https --help
# get access<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>
<\n>"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html" | save out.json<\n>
open out.json
open out.json --raw
rm out.json
<\n>let asd = ("scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html")<\n>
$asd
$asd | from json
open get-access.nu
open get-access.nu | ccp
# get access<\n>let response = ("scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html")<\n>let access = $response | from json | get access_token<\n>
$access
$response
$access
open token-info.nu
open token-info.nu | ccp
let response = (<\n>  {<\n>    client_id: $env.APPLICATION<\n>    client_secret: $env.AUTHKEY<\n>    refresh_token: $access<\n>  } | https --form POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>)<\n>
let response = (<\n>  {<\n>    client_id: $env.APPLICATION<\n>    client_secret: $env.AUTHKEY<\n>    refresh_token: $access<\n>  } | to json | https --form POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>)<\n>
{<\n>  client_id: $env.APPLICATION<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | https --form --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
{<\n>  client_id: $env.APPLICATION<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
{<\n>  client_id: $env.APPLICATION<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | from json | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
{<\n>  client_id: $env.APPLICATION<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
{<\n>  client_id: $env.APPLICATION<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json | https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | https --form --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json | https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
$"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_secret=( $env.AUTHKEY )<\n>refresh_token=( $access )"<\n>| to json<\n>| https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>
$"scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_secret=( $env.AUTHKEY )<\n>refresh_token=( $access )"<\n>| to json<\n>| https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>}<\n>| to json |<\n>https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>}<\n>| to json |<\n>https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
fk
fx
kx
fk
kubectl -n sec-trahoproject-production get pods | detect columns
kubectl -n sec-trahoproject-production get pods | detect columns | where NAME =~ "pull" | get NAME
fk 
kubectl -n sec-trahoproject-production logs pull-production-28868085-xfrjh -c pull | grep CDRPOMPE
kubectl -n sec-trahoproject-production create job --from=cronjobs/pull-group-0-production test -o yaml --dry-run=client | save --force job.yaml
v job.yaml
kubectl apply -f job.yaml 
fk
kubectl -n sec-trahoproject-production logs test-swp2x -c pull-group-0 -f
$env.APPLICATION
open get-access.nu | ccp
# get access<\n>let response = ("scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https:/login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html")<\n>let access = $response | from json | get access_token<\n>
open get-access.nu | ccp
# get access<\n>let response = ("scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html")<\n>let access = $response | from json | get access_token<\n>
$response
$access
open token-info.nu | ccp
{<\n>  client_id: $env.APPLICATION<\n>  grant_type: "client_credentials"<\n>  client_secret: $env.AUTHKEY<\n>  refresh_token: $access<\n>} | to json |<\n>https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  "Accept:application/json"<\n>
z ..
l
z ..
l
z ..
l
mkdir secproj
cd secproj/
mkdir SIEM
cd SIEM
l
touch .envs.nu
v .envs.nu
v
v
z ..
l
z /Users/colombos/http/work/secproj
l
z /Users/colombos/http/work/secproj/SIEM
l
v
z ..
l
z ..
l
z clopin
l
z ..
z work
l
z clopin
l
open .envs.nu
source .envs.nu
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json') | from json<\n>
open customers.nu | ccp
https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json'<\n>
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open dmilogs.nu | ccp
(https $"($env.URL)/dmilogs/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open dmilogs.nu | ccp
(https $"($env.URL)/dmilogs/"<\n>  "customer==IRCASPA"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open dmilogs.nu | ccp
(https --offline GET $"($env.URL)/dmilogs/"<\n>  "customer==IRCASPA"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open dmilogs.nu | ccp
(https GET $"($env.URL)/dmilogs/"<\n>  "idrs==IRCASPA"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https GET $"($env.URL)/dmilogs/"<\n>  "name==elmec-dmilog07"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
fk
(https GET $"($env.URL)/dmilogs/"<\n>  "customer==3"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https --offline GET $"($env.URL)/dmilogs/"<\n>  "customer==3"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https --offline GET $"($env.URL)/dmilogs/"<\n>  "customer==CARBOTER"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https GET $"($env.URL)/dmilogs/"<\n>  "customer==CARBOTER"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
kubectl -n sec-clopin-production logs clopin-sec-clopin-production-56ff8c95c6-nkzgn -c core -f
z w cl cl
v
ql
l
ls **/*entities*
ls **/*entities* | first | get name
v (ls **/*entities* | first | get name)
open dmilogs.nu | ccp
(https --offline GET $"($env.URL)/dmilogs/"<\n>  "name==elmec"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https GET $"($env.URL)/dmilogs/"<\n>  "name==elmec"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open dmilogs.nu | ccp
(https --offline GET $"($env.URL)/dmilogs/?name=elmec"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https GET $"($env.URL)/dmilogs/?name=elmec"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open customers.nu | ccp
(https $"($env.URL)/customers/"<\n>  "idrs==ELMEC"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
(https --offline $"($env.URL)/customers/"<\n>  "idrs==ELMEC"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
open customer.nu | ccp
(https $"($env.URL)/ELMEC/customers/"<\n>  $"Authorization:STATIC ( $env.TOKEN )"<\n>  'Accept:application/json')<\n>
v
v
z ..
l
z /Users/colombos/http/work/pegasus
l
z /Users/colombos/http/work/pegasus/microsoft/graph/
l
z /Users/colombos/http/work/pegasus/microsoft/graph
l
source ../.gessi.env.nu
open get-access.nu | ccp
# get access<\n>let response = ("scope=https://graph.microsoft.com/.default&<\n>grant_type=client_credentials&<\n>client_id=CLIENT_ID&<\n>client_secret=CLIENT_SECRET"<\n>| str replace CLIENT_ID $env.APPLICATION<\n>| str replace CLIENT_SECRET $env.AUTHKEY<\n>| https  --form --body --pretty none POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html")<\n>let access = $response | from json | get access_token<\n>
cv
open get-access2.nu | ccp
(https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)")<\n>
(https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)") | from json<\n>
(https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)") | from json | get access_token<\n>
let access = (https  --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)"<\n>| from json<\n>| get access_token)
$access
open get-access.nu | ccp
# get access<\n>let access = (https --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)"<\n>| from json<\n>| get access_token)<\n>
$access
open signin.nu | ccp
(https --offline GET "https://graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded'<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z and createdDateTime lt 2024-10-31T05:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>)<\n>
open signin.nu | ccp
(https GET "https://graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z and createdDateTime lt 2024-10-30T17:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded'<\n>)<\n>
open signin.nu | ccp
https --body GET "https://graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z and createdDateTime lt 2024-10-30T17:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded'<\n>
(https --body GET "https://graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z and createdDateTime lt 2024-10-30T17:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
date now
date now | date humanize 
date now | date to-record 
date now | date to-table 
date now | date to-timezone 
date now | date to-timezone 'Europe/Rome'
date now 
date now | date to-timezone 'USA/NewYork'
date list-timezone 
date now | date to-timezone 'US/Hawaii'
date format --list
format date --list
yesterday
date now --help 
nu ./get-access.nu 
open get-access.nu | ccp
# get access<\n>let access = (https --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)"<\n>| from json<\n>| get access_token)<\n>
$access
open token-info.nu | ccp
(https --offline POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  $"client_id=( $env.APPLICATION )"<\n>  $"client_secret=($env.AUTHKEY)"<\n>  $"refresh_token=( $access )")<\n>
(https POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  $"client_id=( $env.APPLICATION )"<\n>  $"client_secret=($env.AUTHKEY)"<\n>  $"refresh_token=( $access )")<\n>
open token-info.nu | ccp
(https --form POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  $"client_id=( $env.APPLICATION )"<\n>  $"client_secret=($env.AUTHKEY)"<\n>  $"refresh_token=( $access )")<\n>
open get-access.nu | ccp
# get access<\n>let A = (https --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)"<\n>| from json<\n>| get access_token)<\n>
$A
open token-info.nu | ccp
(https --form POST "login.microsoftonline.com/consumers/oauth2/v2.0/token "<\n>  "grant_type=refresh_token"<\n>  $"client_id=( $env.APPLICATION )"<\n>  $"client_secret=($env.AUTHKEY)"<\n>  $"refresh_token=( $A )")<\n>
(https --form --body POST $"https://login.microsoftonline.com/($env.TENANT)/oauth2/v2.0/token"<\n>  "Content-Type:application/x-www-form-urlencoded"<\n>  "Accept:text/html"<\n>  "scope=https://graph.microsoft.com/.default"<\n>  "grant_type=client_credentials"<\n>  $"client_id=($env.APPLICATION)"<\n>  $"client_secret=($env.AUTHKEY)")<\n>
open securityalert.sh | ccp
(https --body GET "https://graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n><\n>
open securityalert.sh | ccp
(https --body GET "graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n><\n>
open securityalert.sh | ccp
ps
(https --body GET "graph.microsoft.com/v1.0/auditLogs/signIns"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
ps | where name =~ "httpie"
open securityalert.nu | ccp
(https --body GET "graph.microsoft.com/v1.0/security/alert"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
(https --body GET "graph.microsoft.com/v1.0/security/alerts"<\n>  '$filter==createdDateTime gt  2024-10-30T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
open riskyuser.sh | ccp
(https --body GET "https://graph.microsoft.com/v1.0/identityProtection/riskyUsers"<\n>  '$filter==createdDateTime gt 2024-11-10T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
open riskyuser.sh | ccp
(https --body GET "https://graph.microsoft.com/v1.0/identityProtection/riskyUsers"<\n>  '$filter==createdDateTime gt 2024-11-10T11:00:00Z'<\n>  '$orderby==createdDateTime asc'<\n>  $"Authorization:Bearer ( $access )"<\n>  'Accept:application/json'<\n>  'Content-Type:application/x-www-form-urlencoded')<\n>
z w sec sec
l
z w tr ansi
l
v
v job.yaml
kubectl apply -f job.yaml 
fk
kubectl -n sec-trahoproject-production logs test-hrjgx -c pull-group-0 -f
z w ope ope
l
v
z w ansi ansi
l
v
v
z
v job.yaml
kubectl apply -f job.yaml 
fk 
kubectl -n sec-trahoproject-production logs test-8ts7z -c pull-group-0 -f
ssh elmec-dmilog03.dmi.elmec.ad 
ssh elmec-dmilog03.dmi.elmec.ad 
ssh carboter-dmilog02.dmi.elmec.ad 
fk
kx
fk
kubectl -n sec-skipper-quality logs skipper-sec-skipper-quality-657d8bd56c-fp9ql -c skipper -f
kx
kubectl -n sec-pandora-quality get networkpolicies
kubectl -n sec-pandora-quality get networksets
kubectl -n sec-pandora-quality get networkpolicies
kubectl api-resources | grep netw
nslookup skipper.cybergon.com
nslookup pandora.cybergon.com
nslookup smarty.cybergon.com
fk
fj
fk
kx
fk
kubectl -n sec-trahoproject-production exec traho-sec-trahoproject-production-5d8b49f4c6-7bfxc -c api -it -- bash
kubectl get networkpolicies
z conf
z nu
l
brew install fish
zoxide query -l .
fish
kubectl get networkpolicies.crd.projectcalico.org 
fk
kubectl api-resources
kubectl api-resources | grep net
kubectl get networkpolicies.crd.projectcalico.org
fk 
kubectl -n sec-clopin-production get pods -o yaml | from yaml
fk
kubectl -n sec-clopin-production get pods clopin-sec-clopin-production-56ff8c95c6-nkzgn -o yaml | from yaml | get spec.containers.0.volumeMounts
k
kubectl get networksets.crd.projectcalico.org
which carapace
brew remove carapace
